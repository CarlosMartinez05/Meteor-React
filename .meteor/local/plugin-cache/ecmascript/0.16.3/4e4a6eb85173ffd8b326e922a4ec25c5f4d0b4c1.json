{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/ui/components/PatientForm.jsx","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","inputSourceMap":{"version":3,"sources":["imports/ui/components/PatientForm.jsx"],"names":["React","useState","PatientCollection","PatientForm","name","firstLastName","secondLastNAme","Rut","zipCode","state","county","setName","setFirstLastName","setSecondLastName","setRut","setZipCode","setState","setCounty","handleSubmit","e","preventDefault","insert","trim","createdAt","Date","setText","target","value","secondLastName","rut"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,yCAAlC;;AAGC,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,IAAD,EAAMC,aAAN,EAAoBC,cAApB,EAAoCC,GAApC,EAAyCC,OAAzC,EAAiDC,KAAjD,EAAwDC,MAAxD,EAA+DC,OAA/D,EAAwEC,gBAAxE,EAA0FC,iBAA1F,EAA6GC,MAA7G,EAAqHC,UAArH,EAAiIC,QAAjI,EAA2IC,SAA3I,IAAwJhB,QAAQ,CAAC,EAAD,CAAtK;;AAEA,QAAMiB,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AAEA,QAAI,CAAChB,IAAL,EAAW;AAEXF,IAAAA,iBAAiB,CAACmB,MAAlB,CAAyB;AACvBjB,MAAAA,IAAI,EAAEA,IAAI,CAACkB,IAAL,EADiB;AAEvBjB,MAAAA,aAAa,EAAEA,aAAa,CAACiB,IAAd,EAFQ;AAGvBC,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAHY,KAAzB;AAMAC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAZD;;AAcA,SACE,CAAC,IAAD,CAAM,UAAU,WAAhB,CAA4B,SAAS,CAACP,YAAD,CAArC;AACJ,MAAM,CAAC,KAAD,CACE,KAAK,MADP,CAEE,YAAY,cAFd,CAGE,MAAM,CAACd,IAAD,CAHR,CAIE,SAAS,CAAEe,CAAD,IAAOR,OAAO,CAACQ,CAAC,CAACO,MAAF,CAASC,KAAV,CAAf,CAJX;AAMN,MAAM,CAAC,KAAD,CACE,KAAK,MADP,CAEE,YAAY,oBAFd,CAGE,MAAM,CAACtB,aAAD,CAHR,CAIE,SAAS,CAAEc,CAAD,IAAOP,gBAAgB,CAACO,CAAC,CAACO,MAAF,CAASC,KAAV,CAAxB,CAJX;AAMN,OAAO,CAAC,KAAD,CACC,KAAK,MADN,CAEC,YAAY,uBAFb,CAGC,MAAM,CAACC,cAAD,CAHP,CAIC,SAAS,CAAET,CAAD,IAAON,iBAAiB,CAACM,CAAC,CAACO,MAAF,CAASC,KAAV,CAAzB,CAJV;AAMP,OAAO,CAAC,KAAD,CACC,KAAK,MADN,CAEC,YAAY,aAFb,CAGC,MAAM,CAACE,GAAD,CAHP,CAIC,SAAS,CAAEV,CAAD,IAAOL,MAAM,CAACK,CAAC,CAACO,MAAF,CAASC,KAAV,CAAd,CAJV;AAMP,OAAO,CAAC,KAAD,CACC,KAAK,MADN,CAEC,YAAY,kBAFb,CAGC,MAAM,CAACnB,OAAD,CAHP,CAIC,SAAS,CAAEW,CAAD,IAAOJ,UAAU,CAACI,CAAC,CAACO,MAAF,CAASC,KAAV,CAAlB,CAJV;AAMP,OAAO,CAAC,KAAD,CACC,KAAK,MADN,CAEC,YAAY,mBAFb,CAGC,MAAM,CAAClB,KAAD,CAHP,CAIC,SAAS,CAAEU,CAAD,IAAOH,QAAQ,CAACG,CAAC,CAACO,MAAF,CAASC,KAAV,CAAhB,CAJV;AAMP,OAAO,CAAC,KAAD,CACC,KAAK,MADN,CAEC,aAAc,qBAFf,CAGC,MAAM,CAACjB,MAAD,CAHP,CAIC,SAAS,CAAES,CAAD,IAAOF,SAAS,CAACE,CAAC,CAACO,MAAF,CAASC,KAAV,CAAjB,CAJV;AAMP;AACA,MAAM,CAAC,MAAD,CAAQ,KAAK,QAAb,CAAsB,MAAM,CAACT,YAAD,CAA5B,CAA2C,QAAQ,EAAE,MAAF;AACzD,IAAI,EAAE,IAAF,CA9CF;AAgDD,CAjEA;;GAAMf,W;;KAAAA,W;AAmEP,eAAeA,WAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\n const PatientForm = () => {\n  const [name,firstLastName,secondLastNAme, Rut, zipCode,state, county,setName, setFirstLastName, setSecondLastName, setRut, setZipCode, setState, setCounty] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n      name: name.trim(),\n      firstLastName: firstLastName.trim(),\n      createdAt: new Date()\n    });\n\n    setText(\"\");\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={firstLastName}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={secondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={rut}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder= \"Selectd Your County\"\n        value={county}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <button type=\"submit\" value={handleSubmit}>Add Task</button>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n\n/* import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\nexport const PatientForm = () => {\n    const [name, setNameState] = useState(\"\");\n\n\n    const submit = (data, formRef) => {\n        let insertError;\n        const {\n            name,\n        } = data;\n        StudentData.insert(\n            {\n                name,\n            },\n            (error) => { insertError = error; },\n        );\n        if (insertError) {\n            console.log(insertError)\n        } else {\n            console.log(\"Create Patient\")\n            setNameState(name);\n            formRef.reset();\n        }\n    };\n\nreturn (\n    <div>\n        <form className=\"task-form\">\n            <input\n                type=\"name\"\n                placeholder=\"Type your name\"\n            />\n\n            <button type=\"submit\" value={submit}>Add Task</button>\n        </form>\n    </div>\n);\n};\n */"]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/components/PatientForm.jsx"}},"code":"!function (module1) {\n  let React, useState;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    },\n\n    useState(v) {\n      useState = v;\n    }\n\n  }, 0);\n  let PatientCollection;\n  module1.link(\"../../api/Collections/PatientCollection\", {\n    PatientCollection(v) {\n      PatientCollection = v;\n    }\n\n  }, 1);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  const PatientForm = () => {\n    _s();\n\n    const [name, firstLastName, secondLastNAme, Rut, zipCode, state, county, setName, setFirstLastName, setSecondLastName, setRut, setZipCode, setState, setCounty] = useState(\"\");\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if (!name) return;\n      PatientCollection.insert({\n        name: name.trim(),\n        firstLastName: firstLastName.trim(),\n        createdAt: new Date()\n      });\n      setText(\"\");\n    };\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"task-form\",\n      onSubmit: handleSubmit\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to Name\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type firstLastName\",\n      value: firstLastName,\n      onChange: e => setFirstLastName(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type Second Last Name\",\n      value: secondLastName,\n      onChange: e => setSecondLastName(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to rut\",\n      value: rut,\n      onChange: e => setRut(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to zip code\",\n      value: zipCode,\n      onChange: e => setZipCode(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Select Your State\",\n      value: state,\n      onChange: e => setState(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placerholder: \"Selectd Your County\",\n      value: county,\n      onChange: e => setCounty(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      value: handleSubmit\n    }, \"Add Task\"));\n  };\n\n  _s(PatientForm, \"KMSTINnNpw1ZKdt4Y/h6n26LQog=\");\n\n  _c = PatientForm;\n  module1.exportDefault(PatientForm);\n\n  /* import React, { useState } from 'react';\n  import { PatientCollection } from '../../api/Collections/PatientCollection';\n  \n  \n  export const PatientForm = () => {\n      const [name, setNameState] = useState(\"\");\n  \n  \n      const submit = (data, formRef) => {\n          let insertError;\n          const {\n              name,\n          } = data;\n          StudentData.insert(\n              {\n                  name,\n              },\n              (error) => { insertError = error; },\n          );\n          if (insertError) {\n              console.log(insertError)\n          } else {\n              console.log(\"Create Patient\")\n              setNameState(name);\n              formRef.reset();\n          }\n      };\n  \n  return (\n      <div>\n          <form className=\"task-form\">\n              <input\n                  type=\"name\"\n                  placeholder=\"Type your name\"\n              />\n  \n              <button type=\"submit\" value={submit}>Add Task</button>\n          </form>\n      </div>\n  );\n  };\n   */\n  var _c;\n\n  $RefreshReg$(_c, \"PatientForm\");\n}.call(this, module);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAIC,QAAMA,WAAW,GAAG,MAAM;AAAAC;;AACzB,UAAM,CAACC,IAAD,EAAMC,aAAN,EAAoBC,cAApB,EAAoCC,GAApC,EAAyCC,OAAzC,EAAiDC,KAAjD,EAAwDC,MAAxD,EAA+DC,OAA/D,EAAwEC,gBAAxE,EAA0FC,iBAA1F,EAA6GC,MAA7G,EAAqHC,UAArH,EAAiIC,QAAjI,EAA2IC,SAA3I,IAAwJC,QAAQ,CAAC,EAAD,CAAtK;;AAEA,UAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBA,OAAC,CAACC,cAAFD;AAEA,UAAI,CAAChB,IAAL,EAAW;AAEXkB,uBAAiB,CAACC,MAAlBD,CAAyB;AACvBlB,YAAI,EAAEA,IAAI,CAACoB,IAALpB,EADiB;AAEvBC,qBAAa,EAAEA,aAAa,CAACmB,IAAdnB,EAFQ;AAGvBoB,iBAAS,EAAE,IAAIC,IAAJ;AAHY,OAAzBJ;AAMAK,aAAO,CAAC,EAAD,CAAPA;AAXF;;AAcA,wBACE;AAAM,iBAAU,WAAhB;AAA4B,gBAAUR;AAAtC,oBACE;AACE,YAAK,MADP;AAEE,mBAAY,cAFd;AAGE,aAAOf,IAHT;AAIE,gBAAWgB,CAAD,IAAOT,OAAO,CAACS,CAAC,CAACQ,MAAFR,CAASS,KAAV;AAJ1B,MADF,eAOE;AACE,YAAK,MADP;AAEE,mBAAY,oBAFd;AAGE,aAAOxB,aAHT;AAIE,gBAAWe,CAAD,IAAOR,gBAAgB,CAACQ,CAAC,CAACQ,MAAFR,CAASS,KAAV;AAJnC,MAPF,eAaG;AACC,YAAK,MADN;AAEC,mBAAY,uBAFb;AAGC,aAAOC,cAHR;AAIC,gBAAWV,CAAD,IAAOP,iBAAiB,CAACO,CAAC,CAACQ,MAAFR,CAASS,KAAV;AAJnC,MAbH,eAmBG;AACC,YAAK,MADN;AAEC,mBAAY,aAFb;AAGC,aAAOE,GAHR;AAIC,gBAAWX,CAAD,IAAON,MAAM,CAACM,CAAC,CAACQ,MAAFR,CAASS,KAAV;AAJxB,MAnBH,eAyBG;AACC,YAAK,MADN;AAEC,mBAAY,kBAFb;AAGC,aAAOrB,OAHR;AAIC,gBAAWY,CAAD,IAAOL,UAAU,CAACK,CAAC,CAACQ,MAAFR,CAASS,KAAV;AAJ5B,MAzBH,eA+BG;AACC,YAAK,MADN;AAEC,mBAAY,mBAFb;AAGC,aAAOpB,KAHR;AAIC,gBAAWW,CAAD,IAAOJ,QAAQ,CAACI,CAAC,CAACQ,MAAFR,CAASS,KAAV;AAJ1B,MA/BH,eAqCG;AACC,YAAK,MADN;AAEC,oBAAc,qBAFf;AAGC,aAAOnB,MAHR;AAIC,gBAAWU,CAAD,IAAOH,SAAS,CAACG,CAAC,CAACQ,MAAFR,CAASS,KAAV;AAJ3B,MArCH,eA4CE;AAAQ,YAAK,QAAb;AAAsB,aAAOV;AAA7B,kBA5CF,CADF;AAjBD;;KAAMjB,a;;OAAAA;wBAmEQA;;AAGf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":["PatientForm","_s","name","firstLastName","secondLastNAme","Rut","zipCode","state","county","setName","setFirstLastName","setSecondLastName","setRut","setZipCode","setState","setCounty","useState","handleSubmit","e","preventDefault","PatientCollection","insert","trim","createdAt","Date","setText","target","value","secondLastName","rut"],"sources":["imports/ui/components/PatientForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\n const PatientForm = () => {\n  const [name,firstLastName,secondLastNAme, Rut, zipCode,state, county,setName, setFirstLastName, setSecondLastName, setRut, setZipCode, setState, setCounty] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n      name: name.trim(),\n      firstLastName: firstLastName.trim(),\n      createdAt: new Date()\n    });\n\n    setText(\"\");\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={firstLastName}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={secondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={rut}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder= \"Selectd Your County\"\n        value={county}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <button type=\"submit\" value={handleSubmit}>Add Task</button>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n\n/* import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\nexport const PatientForm = () => {\n    const [name, setNameState] = useState(\"\");\n\n\n    const submit = (data, formRef) => {\n        let insertError;\n        const {\n            name,\n        } = data;\n        StudentData.insert(\n            {\n                name,\n            },\n            (error) => { insertError = error; },\n        );\n        if (insertError) {\n            console.log(insertError)\n        } else {\n            console.log(\"Create Patient\")\n            setNameState(name);\n            formRef.reset();\n        }\n    };\n\nreturn (\n    <div>\n        <form className=\"task-form\">\n            <input\n                type=\"name\"\n                placeholder=\"Type your name\"\n            />\n\n            <button type=\"submit\" value={submit}>Add Task</button>\n        </form>\n    </div>\n);\n};\n */"]},"sourceType":"module","externalDependencies":{},"hash":"4e4a6eb85173ffd8b326e922a4ec25c5f4d0b4c1"}
