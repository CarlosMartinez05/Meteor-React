{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/ui/components/PatientForm.jsx","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","inputSourceMap":{"version":3,"sources":["imports/ui/components/PatientForm.jsx"],"names":["React","useState","PatientCollection","useForm","PatientForm","name","setName","FirstLastName","setFirstLastName","SecondLastName","setSecondLastName","Rut","setRut","zipCode","setZipCode","state","setState","county","setCounty","register","handleSubmit","formState","errors","submit","data","preventDefault","insert","required","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\nimport { useForm } from \"react-hook-form\";\n\nconst PatientForm = () => {\n\n  //SetState and Const for parameters\n  const [name, setName] = useState(\"\");\n  const [FirstLastName, setFirstLastName] = useState(\"\");\n  const [SecondLastName, setSecondLastName] = useState(\"\");\n  const [Rut, setRut] = useState(\"\");\n  const [zipCode, setZipCode] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [county, setCounty] = useState(\"\");\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const submit = async (data) => {\n\n    await data.preventDefault;\n\n    if (!Rut) return;\n\n    PatientCollection.insert({\n      name, FirstLastName, SecondLastName, Rut, zipCode, state, county,\n    });\n\n    setName(\"\");\n    setFirstLastName(\"\")\n    setSecondLastName(\"\")\n    setRut(\"\")\n    setZipCode(\"\")\n    setState(\"\")\n    setCounty(\"\")\n  };\n\n  return (\n    <div className='md:container px-10 py-4 bg-slate-300'>\n      <form onSubmit={handleSubmit(submit)}>\n        <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">First name </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          autoComplete=\"name\"\n          type=\"text\"\n          placeholder=\"Type to Name\"\n          value={name}\n          {...register('name', { required: true })}\n          onChange={(e) => setName(e.target.value)}\n        />\n        {errors.name && <p>Se necesita Un Nombre</p>}\n        <label htmlFor=\"FirstLastName\" className=\"block text-sm font-medium text-gray-700\">Apellido Materno </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-blue-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type firstLastName\"\n          value={FirstLastName}\n          {...register('FirstLastName', { required: true })}\n          onChange={(e) => setFirstLastName(e.target.value)}\n        />\n        {errors.FirstLastName && <p>Necesitas Un Apellido Paterno</p>}\n        <label htmlFor=\"SecondLastName\" className=\"block text-sm font-medium text-gray-700\">Apellido Materno </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type Second Last Name\"\n          value={SecondLastName}\n          onChange={(e) => setSecondLastName(e.target.value)}\n        />\n        <label htmlFor=\"Rut\" className=\"block text-sm font-medium text-gray-700\">Rut </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type to rut\"\n          value={Rut}\n          {...register('Rut', { required: true })}\n          onChange={(e) => setRut(e.target.value)}\n        />\n        {errors.Rut && <p>Se Necesita Un Rut</p>}\n        <label htmlFor=\"zipCode\" className=\"block text-sm font-medium text-gray-700\">Codigo Postal </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type to zip code\"\n          value={zipCode}\n          {...register('zipCode', { required: true })}\n          onChange={(e) => setZipCode(e.target.value)}\n        />\n        {errors.zipCode && <p>Se Necesita Un Codigo Postal</p>}\n        <label htmlFor=\"state\" className=\"block text-sm font-medium text-gray-700\">Region </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Select Your State\"\n          value={state}\n          {...register('state', { required: true })}\n          onChange={(e) => setState(e.target.value)}\n        />\n        {errors.state && <p>Se Necesita Una Region</p>}\n        <label htmlFor=\"county\" className=\"block text-sm font-medium text-gray-700\">Comuna </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placerholder=\"Select Your County\"\n          value={county}\n          {...register('county', { required: true })}\n          onChange={(e) => setCounty(e.target.value)}\n        />\n        {errors.county && <p>Se Necesita Una Comuna</p>}\n\n        <button type=\"submit\"  className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">enviar</button>\n      </form>\n    </div>\n  );\n};\n\nexport default PatientForm;\n\n"]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/components/PatientForm.jsx"}},"code":"!function (module1) {\n  var _regeneratorRuntime;\n\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 0);\n\n  var _extends;\n\n  module1.link(\"@babel/runtime/helpers/extends\", {\n    default: function (v) {\n      _extends = v;\n    }\n  }, 1);\n\n  var _slicedToArray;\n\n  module1.link(\"@babel/runtime/helpers/slicedToArray\", {\n    default: function (v) {\n      _slicedToArray = v;\n    }\n  }, 2);\n  var React, useState;\n  module1.link(\"react\", {\n    \"default\": function (v) {\n      React = v;\n    },\n    useState: function (v) {\n      useState = v;\n    }\n  }, 0);\n  var PatientCollection;\n  module1.link(\"../../api/Collections/PatientCollection\", {\n    PatientCollection: function (v) {\n      PatientCollection = v;\n    }\n  }, 1);\n  var useForm;\n  module1.link(\"react-hook-form\", {\n    useForm: function (v) {\n      useForm = v;\n    }\n  }, 2);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  var PatientForm = function () {\n    _s(); //SetState and Const for parameters\n\n\n    var _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n    var _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        FirstLastName = _useState4[0],\n        setFirstLastName = _useState4[1];\n\n    var _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        SecondLastName = _useState6[0],\n        setSecondLastName = _useState6[1];\n\n    var _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        Rut = _useState8[0],\n        setRut = _useState8[1];\n\n    var _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        zipCode = _useState10[0],\n        setZipCode = _useState10[1];\n\n    var _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        state = _useState12[0],\n        setState = _useState12[1];\n\n    var _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        county = _useState14[0],\n        setCounty = _useState14[1];\n\n    var _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n    var submit = function () {\n      function _callee(data) {\n        return _regeneratorRuntime.async(function () {\n          function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _regeneratorRuntime.awrap(data.preventDefault);\n\n                case 2:\n                  if (Rut) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 4:\n                  PatientCollection.insert({\n                    name: name,\n                    FirstLastName: FirstLastName,\n                    SecondLastName: SecondLastName,\n                    Rut: Rut,\n                    zipCode: zipCode,\n                    state: state,\n                    county: county\n                  });\n                  setName(\"\");\n                  setFirstLastName(\"\");\n                  setSecondLastName(\"\");\n                  setRut(\"\");\n                  setZipCode(\"\");\n                  setState(\"\");\n                  setCounty(\"\");\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }\n\n          return _callee$;\n        }(), null, null, null, Promise);\n      }\n\n      return _callee;\n    }();\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"md:container px-10 py-4 bg-slate-300\"\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit(submit)\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"name\",\n      className: \"block text-sm font-medium text-gray-700\"\n    }, \"First name \"), /*#__PURE__*/React.createElement(\"input\", _extends({\n      className: \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n      autoComplete: \"name\",\n      type: \"text\",\n      placeholder: \"Type to Name\",\n      value: name\n    }, register('name', {\n      required: true\n    }), {\n      onChange: function (e) {\n        return setName(e.target.value);\n      }\n    })), errors.name && /*#__PURE__*/React.createElement(\"p\", null, \"Se necesita Un Nombre\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"FirstLastName\",\n      className: \"block text-sm font-medium text-gray-700\"\n    }, \"Apellido Materno \"), /*#__PURE__*/React.createElement(\"input\", _extends({\n      className: \"mt-1 block w-full rounded-md border-blue-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n      type: \"text\",\n      placeholder: \"Type firstLastName\",\n      value: FirstLastName\n    }, register('FirstLastName', {\n      required: true\n    }), {\n      onChange: function (e) {\n        return setFirstLastName(e.target.value);\n      }\n    })), errors.FirstLastName && /*#__PURE__*/React.createElement(\"p\", null, \"Necesitas Un Apellido Paterno\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"SecondLastName\",\n      className: \"block text-sm font-medium text-gray-700\"\n    }, \"Apellido Materno \"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n      type: \"text\",\n      placeholder: \"Type Second Last Name\",\n      value: SecondLastName,\n      onChange: function (e) {\n        return setSecondLastName(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"Rut\",\n      className: \"block text-sm font-medium text-gray-700\"\n    }, \"Rut \"), /*#__PURE__*/React.createElement(\"input\", _extends({\n      className: \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n      type: \"text\",\n      placeholder: \"Type to rut\",\n      value: Rut\n    }, register('Rut', {\n      required: true\n    }), {\n      onChange: function (e) {\n        return setRut(e.target.value);\n      }\n    })), errors.Rut && /*#__PURE__*/React.createElement(\"p\", null, \"Se Necesita Un Rut\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"zipCode\",\n      className: \"block text-sm font-medium text-gray-700\"\n    }, \"Codigo Postal \"), /*#__PURE__*/React.createElement(\"input\", _extends({\n      className: \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n      type: \"text\",\n      placeholder: \"Type to zip code\",\n      value: zipCode\n    }, register('zipCode', {\n      required: true\n    }), {\n      onChange: function (e) {\n        return setZipCode(e.target.value);\n      }\n    })), errors.zipCode && /*#__PURE__*/React.createElement(\"p\", null, \"Se Necesita Un Codigo Postal\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"state\",\n      className: \"block text-sm font-medium text-gray-700\"\n    }, \"Region \"), /*#__PURE__*/React.createElement(\"input\", _extends({\n      className: \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n      type: \"text\",\n      placeholder: \"Select Your State\",\n      value: state\n    }, register('state', {\n      required: true\n    }), {\n      onChange: function (e) {\n        return setState(e.target.value);\n      }\n    })), errors.state && /*#__PURE__*/React.createElement(\"p\", null, \"Se Necesita Una Region\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"county\",\n      className: \"block text-sm font-medium text-gray-700\"\n    }, \"Comuna \"), /*#__PURE__*/React.createElement(\"input\", _extends({\n      className: \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n      type: \"text\",\n      placerholder: \"Select Your County\",\n      value: county\n    }, register('county', {\n      required: true\n    }), {\n      onChange: function (e) {\n        return setCounty(e.target.value);\n      }\n    })), errors.county && /*#__PURE__*/React.createElement(\"p\", null, \"Se Necesita Una Comuna\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n    }, \"enviar\")));\n  };\n\n  _s(PatientForm, \"YESj40tedrML8FoRZK2Nr5RbkwE=\", false, function () {\n    return [useForm];\n  });\n\n  _c = PatientForm;\n  module1.exportDefault(PatientForm);\n\n  var _c;\n\n  $RefreshReg$(_c, \"PatientForm\");\n}.call(this, module);","map":{"version":3,"mappings":"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","names":["PatientForm","_s","useState","name","setName","FirstLastName","setFirstLastName","SecondLastName","setSecondLastName","Rut","setRut","zipCode","setZipCode","state","setState","county","setCounty","useForm","register","handleSubmit","errors","formState","submit","data","preventDefault","PatientCollection","insert","required","e","target","value"],"sources":["imports/ui/components/PatientForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\nimport { useForm } from \"react-hook-form\";\n\nconst PatientForm = () => {\n\n  //SetState and Const for parameters\n  const [name, setName] = useState(\"\");\n  const [FirstLastName, setFirstLastName] = useState(\"\");\n  const [SecondLastName, setSecondLastName] = useState(\"\");\n  const [Rut, setRut] = useState(\"\");\n  const [zipCode, setZipCode] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [county, setCounty] = useState(\"\");\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const submit = async (data) => {\n\n    await data.preventDefault;\n\n    if (!Rut) return;\n\n    PatientCollection.insert({\n      name, FirstLastName, SecondLastName, Rut, zipCode, state, county,\n    });\n\n    setName(\"\");\n    setFirstLastName(\"\")\n    setSecondLastName(\"\")\n    setRut(\"\")\n    setZipCode(\"\")\n    setState(\"\")\n    setCounty(\"\")\n  };\n\n  return (\n    <div className='md:container px-10 py-4 bg-slate-300'>\n      <form onSubmit={handleSubmit(submit)}>\n        <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">First name </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          autoComplete=\"name\"\n          type=\"text\"\n          placeholder=\"Type to Name\"\n          value={name}\n          {...register('name', { required: true })}\n          onChange={(e) => setName(e.target.value)}\n        />\n        {errors.name && <p>Se necesita Un Nombre</p>}\n        <label htmlFor=\"FirstLastName\" className=\"block text-sm font-medium text-gray-700\">Apellido Materno </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-blue-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type firstLastName\"\n          value={FirstLastName}\n          {...register('FirstLastName', { required: true })}\n          onChange={(e) => setFirstLastName(e.target.value)}\n        />\n        {errors.FirstLastName && <p>Necesitas Un Apellido Paterno</p>}\n        <label htmlFor=\"SecondLastName\" className=\"block text-sm font-medium text-gray-700\">Apellido Materno </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type Second Last Name\"\n          value={SecondLastName}\n          onChange={(e) => setSecondLastName(e.target.value)}\n        />\n        <label htmlFor=\"Rut\" className=\"block text-sm font-medium text-gray-700\">Rut </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type to rut\"\n          value={Rut}\n          {...register('Rut', { required: true })}\n          onChange={(e) => setRut(e.target.value)}\n        />\n        {errors.Rut && <p>Se Necesita Un Rut</p>}\n        <label htmlFor=\"zipCode\" className=\"block text-sm font-medium text-gray-700\">Codigo Postal </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Type to zip code\"\n          value={zipCode}\n          {...register('zipCode', { required: true })}\n          onChange={(e) => setZipCode(e.target.value)}\n        />\n        {errors.zipCode && <p>Se Necesita Un Codigo Postal</p>}\n        <label htmlFor=\"state\" className=\"block text-sm font-medium text-gray-700\">Region </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placeholder=\"Select Your State\"\n          value={state}\n          {...register('state', { required: true })}\n          onChange={(e) => setState(e.target.value)}\n        />\n        {errors.state && <p>Se Necesita Una Region</p>}\n        <label htmlFor=\"county\" className=\"block text-sm font-medium text-gray-700\">Comuna </label>\n        <input\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          type=\"text\"\n          placerholder=\"Select Your County\"\n          value={county}\n          {...register('county', { required: true })}\n          onChange={(e) => setCounty(e.target.value)}\n        />\n        {errors.county && <p>Se Necesita Una Comuna</p>}\n\n        <button type=\"submit\"  className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">enviar</button>\n      </form>\n    </div>\n  );\n};\n\nexport default PatientForm;\n\n"]},"sourceType":"module","externalDependencies":{},"hash":"21db85cf6a90affa1dbabab3f6a8a0eec4edc685"}
