{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/ui/components/PatientForm.jsx","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","inputSourceMap":{"version":3,"sources":["imports/ui/components/PatientForm.jsx"],"names":["React","useState","PatientCollection","useForm","PatientForm","name","setName","FirstLastName","setFirstLastName","SecondLastName","setSecondLastName","Rut","setRut","zipCode","setZipCode","state","setState","county","setCounty","submit","e","preventDefault","insert","handleSubmit","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\nimport { useForm } from \"react-hook-form\";\n\n const PatientForm = () => {\n \n //SetState and Const for parameters\n  const [name, setName] = useState(\"\");\n  const [FirstLastName,setFirstLastName ] = useState(\"\");\n  const [SecondLastName,setSecondLastName ] = useState(\"\");\n  const [Rut,setRut ] = useState(\"\");\n  const [zipCode,setZipCode ] = useState(\"\");\n  const [state,setState ] = useState(\"\");\n  const [county,setCounty ] = useState(\"\");\n\n  \n\n\n  const submit = e => {\n    \n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n     name, FirstLastName, SecondLastName, Rut, zipCode, state, county,\n    });\n\n    setName(\"\");\n    setFirstLastName(\"\")\n    setSecondLastName(\"\")\n    setRut(\"\")\n    setZipCode(\"\")\n    setState(\"\")\n    setCounty(\"\")\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        required={true}\n        onChange={(e) => setName(e.target.value)}\n\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={FirstLastName}\n        required={true}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={SecondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={Rut}\n        required={true}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        required={true}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        required={true}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder=\"Select Your County\"\n        value={county}\n        required={true}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <button type=\"submit\" value={submit}>Add Task</button>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n"]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/components/PatientForm.jsx"}},"code":"!function (module1) {\n  let React, useState;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    },\n\n    useState(v) {\n      useState = v;\n    }\n\n  }, 0);\n  let PatientCollection;\n  module1.link(\"../../api/Collections/PatientCollection\", {\n    PatientCollection(v) {\n      PatientCollection = v;\n    }\n\n  }, 1);\n  let useForm;\n  module1.link(\"react-hook-form\", {\n    useForm(v) {\n      useForm = v;\n    }\n\n  }, 2);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  const PatientForm = () => {\n    _s(); //SetState and Const for parameters\n\n\n    const [name, setName] = useState(\"\");\n    const [FirstLastName, setFirstLastName] = useState(\"\");\n    const [SecondLastName, setSecondLastName] = useState(\"\");\n    const [Rut, setRut] = useState(\"\");\n    const [zipCode, setZipCode] = useState(\"\");\n    const [state, setState] = useState(\"\");\n    const [county, setCounty] = useState(\"\");\n\n    const submit = e => {\n      e.preventDefault();\n      if (!name) return;\n      PatientCollection.insert({\n        name,\n        FirstLastName,\n        SecondLastName,\n        Rut,\n        zipCode,\n        state,\n        county\n      });\n      setName(\"\");\n      setFirstLastName(\"\");\n      setSecondLastName(\"\");\n      setRut(\"\");\n      setZipCode(\"\");\n      setState(\"\");\n      setCounty(\"\");\n    };\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"task-form\",\n      onSubmit: handleSubmit\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to Name\",\n      value: name,\n      required: true,\n      onChange: e => setName(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type firstLastName\",\n      value: FirstLastName,\n      required: true,\n      onChange: e => setFirstLastName(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type Second Last Name\",\n      value: SecondLastName,\n      onChange: e => setSecondLastName(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to rut\",\n      value: Rut,\n      required: true,\n      onChange: e => setRut(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to zip code\",\n      value: zipCode,\n      required: true,\n      onChange: e => setZipCode(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Select Your State\",\n      value: state,\n      required: true,\n      onChange: e => setState(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placerholder: \"Select Your County\",\n      value: county,\n      required: true,\n      onChange: e => setCounty(e.target.value)\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      value: submit\n    }, \"Add Task\"));\n  };\n\n  _s(PatientForm, \"X+NQrDeVI0kD1GLobIocfr8o8oA=\");\n\n  _c = PatientForm;\n  module1.exportDefault(PatientForm);\n\n  var _c;\n\n  $RefreshReg$(_c, \"PatientForm\");\n}.call(this, module);","map":{"version":3,"mappings":"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","names":["PatientForm","_s","name","setName","useState","FirstLastName","setFirstLastName","SecondLastName","setSecondLastName","Rut","setRut","zipCode","setZipCode","state","setState","county","setCounty","submit","e","preventDefault","PatientCollection","insert","handleSubmit","target","value"],"sources":["imports/ui/components/PatientForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\nimport { useForm } from \"react-hook-form\";\n\n const PatientForm = () => {\n \n //SetState and Const for parameters\n  const [name, setName] = useState(\"\");\n  const [FirstLastName,setFirstLastName ] = useState(\"\");\n  const [SecondLastName,setSecondLastName ] = useState(\"\");\n  const [Rut,setRut ] = useState(\"\");\n  const [zipCode,setZipCode ] = useState(\"\");\n  const [state,setState ] = useState(\"\");\n  const [county,setCounty ] = useState(\"\");\n\n  \n\n\n  const submit = e => {\n    \n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n     name, FirstLastName, SecondLastName, Rut, zipCode, state, county,\n    });\n\n    setName(\"\");\n    setFirstLastName(\"\")\n    setSecondLastName(\"\")\n    setRut(\"\")\n    setZipCode(\"\")\n    setState(\"\")\n    setCounty(\"\")\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        required={true}\n        onChange={(e) => setName(e.target.value)}\n\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={FirstLastName}\n        required={true}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={SecondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={Rut}\n        required={true}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        required={true}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        required={true}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder=\"Select Your County\"\n        value={county}\n        required={true}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <button type=\"submit\" value={submit}>Add Task</button>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n"]},"sourceType":"module","externalDependencies":{},"hash":"0b2c495e7954cb3a3cf6691e84ad63695afc2d1d"}
