{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/ui/components/PatientForm.jsx","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","inputSourceMap":{"version":3,"sources":["imports/ui/components/PatientForm.jsx"],"names":["React","useState","PatientCollection","PatientForm","name","setNameState","submit","data","formRef","insertError","StudentData","insert","error","console","log","reset"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,yCAAlC;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBJ,QAAQ,CAAC,EAAD,CAArC;;AAGA,QAAMK,MAAM,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC9B,QAAIC,WAAJ;AACA,UAAM;AACFL,MAAAA;AADE,QAEFG,IAFJ;AAGAG,IAAAA,WAAW,CAACC,MAAZ,CACI;AACIP,MAAAA;AADJ,KADJ,EAIKQ,KAAD,IAAW;AAAEH,MAAAA,WAAW,GAAGG,KAAd;AAAsB,KAJvC;;AAMA,QAAIH,WAAJ,EAAiB;AACbI,MAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACH,KAFD,MAEO;AACHI,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAT,MAAAA,YAAY,CAACD,IAAD,CAAZ;AACAI,MAAAA,OAAO,CAACO,KAAR;AACH;AACJ,GAlBD;;AAoBJ,SACI,CAAC,GAAD;AACJ,QAAQ,CAAC,IAAD,CAAM,UAAU,WAAhB;AACR,YAAY,CAAC,KAAD,CACI,KAAK,MADT,CAEI,YAAY,gBAFhB;AAIZ;AACA,YAAY,CAAC,MAAD,CAAQ,KAAK,QAAb,CAAsB,QAAQ,EAAE,MAAF;AAC1C,QAAQ,EAAE,IAAF;AACR,IAAI,EAAE,GAAF,CAVJ;AAYC,CApCM;;GAAMZ,W;;KAAAA,W","sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\nexport const PatientForm = () => {\n    const [name, setNameState] = useState(\"\");\n\n\n    const submit = (data, formRef) => {\n        let insertError;\n        const {\n            name,\n        } = data;\n        StudentData.insert(\n            {\n                name,\n            },\n            (error) => { insertError = error; },\n        );\n        if (insertError) {\n            console.log(insertError)\n        } else {\n            console.log(\"Create Patient\")\n            setNameState(name);\n            formRef.reset();\n        }\n    };\n\nreturn (\n    <div>\n        <form className=\"task-form\">\n            <input\n                type=\"name\"\n                placeholder=\"Type your name\"\n            />\n\n            <button type=\"submit\">Add Task</button>\n        </form>\n    </div>\n);\n};\n"]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/components/PatientForm.jsx"}},"code":"!function (module1) {\n  var _slicedToArray;\n\n  module1.link(\"@babel/runtime/helpers/slicedToArray\", {\n    default: function (v) {\n      _slicedToArray = v;\n    }\n  }, 0);\n  module1.export({\n    PatientForm: function () {\n      return PatientForm;\n    }\n  });\n  var React, useState;\n  module1.link(\"react\", {\n    \"default\": function (v) {\n      React = v;\n    },\n    useState: function (v) {\n      useState = v;\n    }\n  }, 0);\n  var PatientCollection;\n  module1.link(\"../../api/Collections/PatientCollection\", {\n    PatientCollection: function (v) {\n      PatientCollection = v;\n    }\n  }, 1);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  var PatientForm = function () {\n    _s();\n\n    var _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setNameState = _useState2[1];\n\n    var submit = function (data, formRef) {\n      var insertError;\n      var name = data.name;\n      StudentData.insert({\n        name: name\n      }, function (error) {\n        insertError = error;\n      });\n\n      if (insertError) {\n        console.log(insertError);\n      } else {\n        console.log(\"Create Patient\");\n        setNameState(name);\n        formRef.reset();\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"task-form\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"name\",\n      placeholder: \"Type your name\"\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\"\n    }, \"Add Task\")));\n  };\n\n  _s(PatientForm, \"ThWLaKN+n6q9Y1Lk8GwTfd2kP10=\");\n\n  _c = PatientForm;\n\n  var _c;\n\n  $RefreshReg$(_c, \"PatientForm\");\n}.call(this, module);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,MAAMA,WAAW,GAAG,YAAM;AAAAC;;AAC7B,oBAA6BC,QAAQ,CAAC,EAAD,CAArC;AAAA;AAAA,QAAOC,IAAP;AAAA,QAAaC,YAAb;;AAGA,QAAMC,MAAM,GAAG,UAACC,IAAD,EAAOC,OAAP,EAAmB;AAC9B,UAAIC,WAAJ;AACA,UACIL,IADJ,GAEIG,IAFJ,CACIH,IADJ;AAGAM,iBAAW,CAACC,MAAZD,CACI;AACIN;AADJ,OADJM,EAIKE,eAAD,EAAW;AAAEH,mBAAW,GAAGG,KAAdH;AAJjB;;AAMA,UAAIA,WAAJ,EAAiB;AACbI,eAAO,CAACC,GAARD,CAAYJ,WAAZI;AADJ,aAEO;AACHA,eAAO,CAACC,GAARD,CAAY,gBAAZA;AACAR,oBAAY,CAACD,IAAD,CAAZC;AACAG,eAAO,CAACO,KAARP;AACH;AAjBL;;AAoBJ,wBACI,8CACI;AAAM,iBAAU;AAAhB,oBACI;AACI,YAAK,MADT;AAEI,mBAAY;AAFhB,MADJ,eAMI;AAAQ,YAAK;AAAb,kBANJ,CADJ,CADJ;AAxBO;;KAAMP,a;;OAAAA","names":["PatientForm","_s","useState","name","setNameState","submit","data","formRef","insertError","StudentData","insert","error","console","log","reset"],"sources":["imports/ui/components/PatientForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\nexport const PatientForm = () => {\n    const [name, setNameState] = useState(\"\");\n\n\n    const submit = (data, formRef) => {\n        let insertError;\n        const {\n            name,\n        } = data;\n        StudentData.insert(\n            {\n                name,\n            },\n            (error) => { insertError = error; },\n        );\n        if (insertError) {\n            console.log(insertError)\n        } else {\n            console.log(\"Create Patient\")\n            setNameState(name);\n            formRef.reset();\n        }\n    };\n\nreturn (\n    <div>\n        <form className=\"task-form\">\n            <input\n                type=\"name\"\n                placeholder=\"Type your name\"\n            />\n\n            <button type=\"submit\">Add Task</button>\n        </form>\n    </div>\n);\n};\n"]},"sourceType":"module","externalDependencies":{},"hash":"dff4d9aa4d1efbc44af2a264e5fa5619b41ba5e1"}
