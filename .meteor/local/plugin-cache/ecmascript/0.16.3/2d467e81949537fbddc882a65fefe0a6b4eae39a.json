{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/mongo/oplog_v2_converter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/mongo/oplog_v2_converter.js","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/mongo/oplog_v2_converter.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/mongo/oplog_v2_converter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/oplog_v2_converter.js"}},"code":"module.export({\n  oplogV2V1Converter: () => oplogV2V1Converter\n});\n\n// Converter of the new MongoDB Oplog format (>=5.0) to the one that Meteor\n// handles well, i.e., `$set` and `$unset`. The new format is completely new,\n// and looks as follows:\n//\n//   { $v: 2, diff: Diff }\n//\n// where `Diff` is a recursive structure:\n//\n//   {\n//     // Nested updates (sometimes also represented with an s-field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     i: { <key>: <value>, ... },\n//\n//     // Top-level updates.\n//     // Example: `{ $set: { foo: { bar: 1 } } }`.\n//     u: { <key>: <value>, ... },\n//\n//     // Unsets.\n//     // Example: `{ $unset: { foo: '' } }`.\n//     d: { <key>: false, ... },\n//\n//     // Array operations.\n//     // Example: `{ $push: { foo: 'bar' } }`.\n//     s<key>: { a: true, u<index>: <value>, ... },\n//     ...\n//\n//     // Nested operations (sometimes also represented in the `i` field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     s<key>: Diff,\n//     ...\n//   }\n//\n// (all fields are optional).\nfunction join(prefix, key) {\n  return prefix ? \"\".concat(prefix, \".\").concat(key) : key;\n}\n\nconst arrayOperatorKeyRegex = /^(a|u\\d+)$/;\n\nfunction isArrayOperatorKey(field) {\n  return arrayOperatorKeyRegex.test(field);\n}\n\nfunction isArrayOperator(operator) {\n  return operator.a === true && Object.keys(operator).every(isArrayOperatorKey);\n}\n\nfunction flattenObjectInto(target, source, prefix) {\n  if (Array.isArray(source) || typeof source !== 'object' || source === null) {\n    target[prefix] = source;\n  } else {\n    const entries = Object.entries(source);\n\n    if (entries.length) {\n      entries.forEach(_ref => {\n        let [key, value] = _ref;\n        flattenObjectInto(target, value, join(prefix, key));\n      });\n    } else {\n      target[prefix] = source;\n    }\n  }\n}\n\nconst logDebugMessages = !!process.env.OPLOG_CONVERTER_DEBUG;\n\nfunction convertOplogDiff(oplogEntry, diff, prefix) {\n  if (logDebugMessages) {\n    console.log(\"convertOplogDiff(\".concat(JSON.stringify(oplogEntry), \", \").concat(JSON.stringify(diff), \", \").concat(JSON.stringify(prefix), \")\"));\n  }\n\n  Object.entries(diff).forEach(_ref2 => {\n    let [diffKey, value] = _ref2;\n\n    if (diffKey === 'd') {\n      var _oplogEntry$$unset;\n\n      // Handle `$unset`s.\n      (_oplogEntry$$unset = oplogEntry.$unset) !== null && _oplogEntry$$unset !== void 0 ? _oplogEntry$$unset : oplogEntry.$unset = {};\n      Object.keys(value).forEach(key => {\n        oplogEntry.$unset[join(prefix, key)] = true;\n      });\n    } else if (diffKey === 'i') {\n      var _oplogEntry$$set;\n\n      // Handle (potentially) nested `$set`s.\n      (_oplogEntry$$set = oplogEntry.$set) !== null && _oplogEntry$$set !== void 0 ? _oplogEntry$$set : oplogEntry.$set = {};\n      flattenObjectInto(oplogEntry.$set, value, prefix);\n    } else if (diffKey === 'u') {\n      var _oplogEntry$$set2;\n\n      // Handle flat `$set`s.\n      (_oplogEntry$$set2 = oplogEntry.$set) !== null && _oplogEntry$$set2 !== void 0 ? _oplogEntry$$set2 : oplogEntry.$set = {};\n      Object.entries(value).forEach(_ref3 => {\n        let [key, value] = _ref3;\n        oplogEntry.$set[join(prefix, key)] = value;\n      });\n    } else {\n      // Handle s-fields.\n      const key = diffKey.slice(1);\n\n      if (isArrayOperator(value)) {\n        // Array operator.\n        Object.entries(value).forEach(_ref4 => {\n          let [position, value] = _ref4;\n\n          if (position === 'a') {\n            return;\n          }\n\n          const positionKey = join(join(prefix, key), position.slice(1));\n\n          if (value === null) {\n            var _oplogEntry$$unset2;\n\n            (_oplogEntry$$unset2 = oplogEntry.$unset) !== null && _oplogEntry$$unset2 !== void 0 ? _oplogEntry$$unset2 : oplogEntry.$unset = {};\n            oplogEntry.$unset[positionKey] = true;\n          } else {\n            var _oplogEntry$$set3;\n\n            (_oplogEntry$$set3 = oplogEntry.$set) !== null && _oplogEntry$$set3 !== void 0 ? _oplogEntry$$set3 : oplogEntry.$set = {};\n            oplogEntry.$set[positionKey] = value;\n          }\n        });\n      } else if (key) {\n        // Nested object.\n        convertOplogDiff(oplogEntry, value, join(prefix, key));\n      }\n    }\n  });\n}\n\nfunction oplogV2V1Converter(oplogEntry) {\n  // Pass-through v1 and (probably) invalid entries.\n  if (oplogEntry.$v !== 2 || !oplogEntry.diff) {\n    return oplogEntry;\n  }\n\n  const convertedOplogEntry = {\n    $v: 2\n  };\n  convertOplogDiff(convertedOplogEntry, oplogEntry.diff, '');\n  return convertedOplogEntry;\n}","map":{"version":3,"sources":["packages/mongo/oplog_v2_converter.js"],"names":["module","export","oplogV2V1Converter","join","prefix","key","arrayOperatorKeyRegex","isArrayOperatorKey","field","test","isArrayOperator","operator","a","Object","keys","every","flattenObjectInto","target","source","Array","isArray","entries","length","forEach","value","logDebugMessages","process","env","OPLOG_CONVERTER_DEBUG","convertOplogDiff","oplogEntry","diff","console","log","JSON","stringify","diffKey","$unset","$set","slice","position","positionKey","$v","convertedOplogEntry"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,kBAAkB,EAAC,MAAIA;AAAxB,CAAd;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,GAAtB,EAA2B;AACzB,SAAOD,MAAM,aAAMA,MAAN,cAAgBC,GAAhB,IAAwBA,GAArC;AACD;;AAED,MAAMC,qBAAqB,GAAG,YAA9B;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,SAAOF,qBAAqB,CAACG,IAAtB,CAA2BD,KAA3B,CAAP;AACD;;AAED,SAASE,eAAT,CAAyBC,QAAzB,EAAmC;AACjC,SAAOA,QAAQ,CAACC,CAAT,KAAe,IAAf,IAAuBC,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,KAAtB,CAA4BR,kBAA5B,CAA9B;AACD;;AAED,SAASS,iBAAT,CAA2BC,MAA3B,EAAmCC,MAAnC,EAA2Cd,MAA3C,EAAmD;AACjD,MAAIe,KAAK,CAACC,OAAN,CAAcF,MAAd,KAAyB,OAAOA,MAAP,KAAkB,QAA3C,IAAuDA,MAAM,KAAK,IAAtE,EAA4E;AAC1ED,IAAAA,MAAM,CAACb,MAAD,CAAN,GAAiBc,MAAjB;AACD,GAFD,MAEO;AACL,UAAMG,OAAO,GAAGR,MAAM,CAACQ,OAAP,CAAeH,MAAf,CAAhB;;AACA,QAAIG,OAAO,CAACC,MAAZ,EAAoB;AAClBD,MAAAA,OAAO,CAACE,OAAR,CAAgB,QAAkB;AAAA,YAAjB,CAAClB,GAAD,EAAMmB,KAAN,CAAiB;AAChCR,QAAAA,iBAAiB,CAACC,MAAD,EAASO,KAAT,EAAgBrB,IAAI,CAACC,MAAD,EAASC,GAAT,CAApB,CAAjB;AACD,OAFD;AAGD,KAJD,MAIO;AACLY,MAAAA,MAAM,CAACb,MAAD,CAAN,GAAiBc,MAAjB;AACD;AACF;AACF;;AAED,MAAMO,gBAAgB,GAAG,CAAC,CAACC,OAAO,CAACC,GAAR,CAAYC,qBAAvC;;AAEA,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,IAAtC,EAA4C3B,MAA5C,EAAoD;AAClD,MAAIqB,gBAAJ,EAAsB;AACpBO,IAAAA,OAAO,CAACC,GAAR,4BAAgCC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAAhC,eAA+DI,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA/D,eAAwFG,IAAI,CAACC,SAAL,CAAe/B,MAAf,CAAxF;AACD;;AAEDS,EAAAA,MAAM,CAACQ,OAAP,CAAeU,IAAf,EAAqBR,OAArB,CAA6B,SAAsB;AAAA,QAArB,CAACa,OAAD,EAAUZ,KAAV,CAAqB;;AACjD,QAAIY,OAAO,KAAK,GAAhB,EAAqB;AAAA;;AACnB;AACA,4BAAAN,UAAU,CAACO,MAAX,mEAAAP,UAAU,CAACO,MAAX,GAAsB,EAAtB;AACAxB,MAAAA,MAAM,CAACC,IAAP,CAAYU,KAAZ,EAAmBD,OAAnB,CAA2BlB,GAAG,IAAI;AAChCyB,QAAAA,UAAU,CAACO,MAAX,CAAkBlC,IAAI,CAACC,MAAD,EAASC,GAAT,CAAtB,IAAuC,IAAvC;AACD,OAFD;AAGD,KAND,MAMO,IAAI+B,OAAO,KAAK,GAAhB,EAAqB;AAAA;;AAC1B;AACA,0BAAAN,UAAU,CAACQ,IAAX,+DAAAR,UAAU,CAACQ,IAAX,GAAoB,EAApB;AACAtB,MAAAA,iBAAiB,CAACc,UAAU,CAACQ,IAAZ,EAAkBd,KAAlB,EAAyBpB,MAAzB,CAAjB;AACD,KAJM,MAIA,IAAIgC,OAAO,KAAK,GAAhB,EAAqB;AAAA;;AAC1B;AACA,2BAAAN,UAAU,CAACQ,IAAX,iEAAAR,UAAU,CAACQ,IAAX,GAAoB,EAApB;AACAzB,MAAAA,MAAM,CAACQ,OAAP,CAAeG,KAAf,EAAsBD,OAAtB,CAA8B,SAAkB;AAAA,YAAjB,CAAClB,GAAD,EAAMmB,KAAN,CAAiB;AAC9CM,QAAAA,UAAU,CAACQ,IAAX,CAAgBnC,IAAI,CAACC,MAAD,EAASC,GAAT,CAApB,IAAqCmB,KAArC;AACD,OAFD;AAGD,KANM,MAMA;AACL;AACA,YAAMnB,GAAG,GAAG+B,OAAO,CAACG,KAAR,CAAc,CAAd,CAAZ;;AACA,UAAI7B,eAAe,CAACc,KAAD,CAAnB,EAA4B;AAC1B;AACAX,QAAAA,MAAM,CAACQ,OAAP,CAAeG,KAAf,EAAsBD,OAAtB,CAA8B,SAAuB;AAAA,cAAtB,CAACiB,QAAD,EAAWhB,KAAX,CAAsB;;AACnD,cAAIgB,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACD;;AAED,gBAAMC,WAAW,GAAGtC,IAAI,CAACA,IAAI,CAACC,MAAD,EAASC,GAAT,CAAL,EAAoBmC,QAAQ,CAACD,KAAT,CAAe,CAAf,CAApB,CAAxB;;AACA,cAAIf,KAAK,KAAK,IAAd,EAAoB;AAAA;;AAClB,mCAAAM,UAAU,CAACO,MAAX,qEAAAP,UAAU,CAACO,MAAX,GAAsB,EAAtB;AACAP,YAAAA,UAAU,CAACO,MAAX,CAAkBI,WAAlB,IAAiC,IAAjC;AACD,WAHD,MAGO;AAAA;;AACL,iCAAAX,UAAU,CAACQ,IAAX,iEAAAR,UAAU,CAACQ,IAAX,GAAoB,EAApB;AACAR,YAAAA,UAAU,CAACQ,IAAX,CAAgBG,WAAhB,IAA+BjB,KAA/B;AACD;AACF,SAbD;AAcD,OAhBD,MAgBO,IAAInB,GAAJ,EAAS;AACd;AACAwB,QAAAA,gBAAgB,CAACC,UAAD,EAAaN,KAAb,EAAoBrB,IAAI,CAACC,MAAD,EAASC,GAAT,CAAxB,CAAhB;AACD;AACF;AACF,GAzCD;AA0CD;;AAEM,SAASH,kBAAT,CAA4B4B,UAA5B,EAAwC;AAC7C;AACA,MAAIA,UAAU,CAACY,EAAX,KAAkB,CAAlB,IAAuB,CAACZ,UAAU,CAACC,IAAvC,EAA6C;AAC3C,WAAOD,UAAP;AACD;;AAED,QAAMa,mBAAmB,GAAG;AAAED,IAAAA,EAAE,EAAE;AAAN,GAA5B;AACAb,EAAAA,gBAAgB,CAACc,mBAAD,EAAsBb,UAAU,CAACC,IAAjC,EAAuC,EAAvC,CAAhB;AACA,SAAOY,mBAAP;AACD","sourcesContent":["// Converter of the new MongoDB Oplog format (>=5.0) to the one that Meteor\n// handles well, i.e., `$set` and `$unset`. The new format is completely new,\n// and looks as follows:\n//\n//   { $v: 2, diff: Diff }\n//\n// where `Diff` is a recursive structure:\n//\n//   {\n//     // Nested updates (sometimes also represented with an s-field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     i: { <key>: <value>, ... },\n//\n//     // Top-level updates.\n//     // Example: `{ $set: { foo: { bar: 1 } } }`.\n//     u: { <key>: <value>, ... },\n//\n//     // Unsets.\n//     // Example: `{ $unset: { foo: '' } }`.\n//     d: { <key>: false, ... },\n//\n//     // Array operations.\n//     // Example: `{ $push: { foo: 'bar' } }`.\n//     s<key>: { a: true, u<index>: <value>, ... },\n//     ...\n//\n//     // Nested operations (sometimes also represented in the `i` field).\n//     // Example: `{ $set: { 'foo.bar': 1 } }`.\n//     s<key>: Diff,\n//     ...\n//   }\n//\n// (all fields are optional).\n\nfunction join(prefix, key) {\n  return prefix ? `${prefix}.${key}` : key;\n}\n\nconst arrayOperatorKeyRegex = /^(a|u\\d+)$/;\n\nfunction isArrayOperatorKey(field) {\n  return arrayOperatorKeyRegex.test(field);\n}\n\nfunction isArrayOperator(operator) {\n  return operator.a === true && Object.keys(operator).every(isArrayOperatorKey);\n}\n\nfunction flattenObjectInto(target, source, prefix) {\n  if (Array.isArray(source) || typeof source !== 'object' || source === null) {\n    target[prefix] = source;\n  } else {\n    const entries = Object.entries(source);\n    if (entries.length) {\n      entries.forEach(([key, value]) => {\n        flattenObjectInto(target, value, join(prefix, key));\n      });\n    } else {\n      target[prefix] = source;\n    }\n  }\n}\n\nconst logDebugMessages = !!process.env.OPLOG_CONVERTER_DEBUG;\n\nfunction convertOplogDiff(oplogEntry, diff, prefix) {\n  if (logDebugMessages) {\n    console.log(`convertOplogDiff(${JSON.stringify(oplogEntry)}, ${JSON.stringify(diff)}, ${JSON.stringify(prefix)})`);\n  }\n\n  Object.entries(diff).forEach(([diffKey, value]) => {\n    if (diffKey === 'd') {\n      // Handle `$unset`s.\n      oplogEntry.$unset ??= {};\n      Object.keys(value).forEach(key => {\n        oplogEntry.$unset[join(prefix, key)] = true;\n      });\n    } else if (diffKey === 'i') {\n      // Handle (potentially) nested `$set`s.\n      oplogEntry.$set ??= {};\n      flattenObjectInto(oplogEntry.$set, value, prefix);\n    } else if (diffKey === 'u') {\n      // Handle flat `$set`s.\n      oplogEntry.$set ??= {};\n      Object.entries(value).forEach(([key, value]) => {\n        oplogEntry.$set[join(prefix, key)] = value;\n      });\n    } else {\n      // Handle s-fields.\n      const key = diffKey.slice(1);\n      if (isArrayOperator(value)) {\n        // Array operator.\n        Object.entries(value).forEach(([position, value]) => {\n          if (position === 'a') {\n            return;\n          }\n\n          const positionKey = join(join(prefix, key), position.slice(1));\n          if (value === null) {\n            oplogEntry.$unset ??= {};\n            oplogEntry.$unset[positionKey] = true;\n          } else {\n            oplogEntry.$set ??= {};\n            oplogEntry.$set[positionKey] = value;\n          }\n        });\n      } else if (key) {\n        // Nested object.\n        convertOplogDiff(oplogEntry, value, join(prefix, key));\n      }\n    }\n  });\n}\n\nexport function oplogV2V1Converter(oplogEntry) {\n  // Pass-through v1 and (probably) invalid entries.\n  if (oplogEntry.$v !== 2 || !oplogEntry.diff) {\n    return oplogEntry;\n  }\n\n  const convertedOplogEntry = { $v: 2 };\n  convertOplogDiff(convertedOplogEntry, oplogEntry.diff, '');\n  return convertedOplogEntry;\n}\n"]},"sourceType":"module","externalDependencies":{},"hash":"2d467e81949537fbddc882a65fefe0a6b4eae39a"}
