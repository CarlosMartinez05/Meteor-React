{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/minimongo/cursor.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/minimongo/cursor.js","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/minimongo/cursor.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/minimongo/cursor.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/cursor.js"}},"code":"var _regeneratorRuntime;\n\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nmodule.export({\n  \"default\": function () {\n    return Cursor;\n  }\n});\nvar LocalCollection;\nmodule.link(\"./local_collection.js\", {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn;\nmodule.link(\"./common.js\", {\n  hasOwn: function (v) {\n    hasOwn = v;\n  }\n}, 1);\nvar ASYNC_CURSOR_METHODS, getAsyncMethodName;\nmodule.link(\"./constants\", {\n  ASYNC_CURSOR_METHODS: function (v) {\n    ASYNC_CURSOR_METHODS = v;\n  },\n  getAsyncMethodName: function (v) {\n    getAsyncMethodName = v;\n  }\n}, 2);\n\nvar Cursor = /*#__PURE__*/function (_Symbol$iterator, _Symbol$asyncIterator) {\n  // don't call this ctor directly.  use LocalCollection.find().\n  function Cursor(collection, selector) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n    this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.\n\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n\n\n  var _proto = Cursor.prototype;\n\n  _proto.count = function () {\n    function count() {\n      if (this.reactive) {\n        // allow the observe to be unordered\n        this._depend({\n          added: true,\n          removed: true\n        }, true);\n      }\n\n      return this._getRawObjects({\n        ordered: true\n      }).length;\n    }\n\n    return count;\n  }()\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  ;\n\n  _proto.fetch = function () {\n    function fetch() {\n      var result = [];\n      this.forEach(function (doc) {\n        result.push(doc);\n      });\n      return result;\n    }\n\n    return fetch;\n  }();\n\n  _proto[_Symbol$iterator] = function () {\n    var _this = this;\n\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n\n    var index = 0;\n\n    var objects = this._getRawObjects({\n      ordered: true\n    });\n\n    return {\n      next: function () {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          var element = _this._projectionFn(objects[index++]);\n\n          if (_this._transform) element = _this._transform(element);\n          return {\n            value: element\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  };\n\n  _proto[_Symbol$asyncIterator] = function () {\n    var syncResult = this[Symbol.iterator]();\n    return {\n      next: function () {\n        function _callee() {\n          return _regeneratorRuntime.async(function () {\n            function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    return _context.abrupt(\"return\", Promise.resolve(syncResult.next()));\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }\n\n            return _callee$;\n          }(), null, null, null, Promise);\n        }\n\n        return _callee;\n      }()\n    };\n  }\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  ;\n\n  _proto.forEach = function () {\n    function forEach(callback, thisArg) {\n      var _this2 = this;\n\n      if (this.reactive) {\n        this._depend({\n          addedBefore: true,\n          removed: true,\n          changed: true,\n          movedBefore: true\n        });\n      }\n\n      this._getRawObjects({\n        ordered: true\n      }).forEach(function (element, i) {\n        // This doubles as a clone operation.\n        element = _this2._projectionFn(element);\n\n        if (_this2._transform) {\n          element = _this2._transform(element);\n        }\n\n        callback.call(thisArg, element, i, _this2);\n      });\n    }\n\n    return forEach;\n  }();\n\n  _proto.getTransform = function () {\n    function getTransform() {\n      return this._transform;\n    }\n\n    return getTransform;\n  }()\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  ;\n\n  _proto.map = function () {\n    function map(callback, thisArg) {\n      var _this3 = this;\n\n      var result = [];\n      this.forEach(function (doc, i) {\n        result.push(callback.call(thisArg, doc, i, _this3));\n      });\n      return result;\n    }\n\n    return map;\n  }() // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  ;\n\n  _proto.observe = function () {\n    function observe(options) {\n      return LocalCollection._observeFromObserveChanges(this, options);\n    }\n\n    return observe;\n  }()\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  ;\n\n  _proto.observeChanges = function () {\n    function observeChanges(options) {\n      var _this4 = this;\n\n      var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with\n      // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n      // comment in _modifyAndNotify\n      // XXX allow skip/limit with unordered observe\n\n\n      if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n        throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n      }\n\n      if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n        throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n      }\n\n      var distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();\n      var query = {\n        cursor: this,\n        dirty: false,\n        distances: distances,\n        matcher: this.matcher,\n        // not fast pathed\n        ordered: ordered,\n        projectionFn: this._projectionFn,\n        resultsSnapshot: null,\n        sorter: ordered && this.sorter\n      };\n      var qid; // Non-reactive queries call added[Before] and then never call anything\n      // else.\n\n      if (this.reactive) {\n        qid = this.collection.next_qid++;\n        this.collection.queries[qid] = query;\n      }\n\n      query.results = this._getRawObjects({\n        ordered: ordered,\n        distances: query.distances\n      });\n\n      if (this.collection.paused) {\n        query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();\n      } // wrap callbacks we were passed. callbacks only fire when not paused and\n      // are never undefined\n      // Filters out blacklisted fields according to cursor's projection.\n      // XXX wrong place for this?\n      // furthermore, callbacks enqueue until the operation we're working on is\n      // done.\n\n\n      var wrapCallback = function (fn) {\n        if (!fn) {\n          return function () {};\n        }\n\n        var self = _this4;\n        return function\n          /* args*/\n        () {\n          var _this5 = this;\n\n          if (self.collection.paused) {\n            return;\n          }\n\n          var args = arguments;\n\n          self.collection._observeQueue.queueTask(function () {\n            fn.apply(_this5, args);\n          });\n        };\n      };\n\n      query.added = wrapCallback(options.added);\n      query.changed = wrapCallback(options.changed);\n      query.removed = wrapCallback(options.removed);\n\n      if (ordered) {\n        query.addedBefore = wrapCallback(options.addedBefore);\n        query.movedBefore = wrapCallback(options.movedBefore);\n      }\n\n      if (!options._suppress_initial && !this.collection.paused) {\n        query.results.forEach(function (doc) {\n          var fields = EJSON.clone(doc);\n          delete fields._id;\n\n          if (ordered) {\n            query.addedBefore(doc._id, _this4._projectionFn(fields), null);\n          }\n\n          query.added(doc._id, _this4._projectionFn(fields));\n        });\n      }\n\n      var handle = Object.assign(new LocalCollection.ObserveHandle(), {\n        collection: this.collection,\n        stop: function () {\n          if (_this4.reactive) {\n            delete _this4.collection.queries[qid];\n          }\n        }\n      });\n\n      if (this.reactive && Tracker.active) {\n        // XXX in many cases, the same observe will be recreated when\n        // the current autorun is rerun.  we could save work by\n        // letting it linger across rerun and potentially get\n        // repurposed if the same observe is performed, using logic\n        // similar to that of Meteor.subscribe.\n        Tracker.onInvalidate(function () {\n          handle.stop();\n        });\n      } // run the observe callbacks resulting from the initial contents\n      // before we leave the observe.\n\n\n      this.collection._observeQueue.drain();\n\n      return handle;\n    }\n\n    return observeChanges;\n  }() // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  ;\n\n  _proto._depend = function () {\n    function _depend(changers, _allow_unordered) {\n      if (Tracker.active) {\n        var dependency = new Tracker.Dependency();\n        var notify = dependency.changed.bind(dependency);\n        dependency.depend();\n        var options = {\n          _allow_unordered: _allow_unordered,\n          _suppress_initial: true\n        };\n        ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(function (fn) {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        }); // observeChanges will stop() when this computation is invalidated\n\n        this.observeChanges(options);\n      }\n    }\n\n    return _depend;\n  }();\n\n  _proto._getCollectionName = function () {\n    function _getCollectionName() {\n      return this.collection.name;\n    }\n\n    return _getCollectionName;\n  }() // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  ;\n\n  _proto._getRawObjects = function () {\n    function _getRawObjects() {\n      var _this6 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // By default this method will respect skip and limit because .fetch(),\n      // .forEach() etc... expect this behaviour. It can be forced to ignore\n      // skip and limit by setting applySkipLimit to false (.count() does this,\n      // for example)\n      var applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n      // compatible\n\n      var results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value\n\n      if (this._selectorId !== undefined) {\n        // If you have non-zero skip and ask for a single id, you get nothing.\n        // This is so it matches the behavior of the '{_id: foo}' path.\n        if (applySkipLimit && this.skip) {\n          return results;\n        }\n\n        var selectedDoc = this.collection._docs.get(this._selectorId);\n\n        if (selectedDoc) {\n          if (options.ordered) {\n            results.push(selectedDoc);\n          } else {\n            results.set(this._selectorId, selectedDoc);\n          }\n        }\n\n        return results;\n      } // slow path for arbitrary selector, sort, skip, limit\n      // in the observeChanges case, distances is actually part of the \"query\"\n      // (ie, live results set) object.  in other cases, distances is only used\n      // inside this function.\n\n\n      var distances;\n\n      if (this.matcher.hasGeoQuery() && options.ordered) {\n        if (options.distances) {\n          distances = options.distances;\n          distances.clear();\n        } else {\n          distances = new LocalCollection._IdMap();\n        }\n      }\n\n      this.collection._docs.forEach(function (doc, id) {\n        var matchResult = _this6.matcher.documentMatches(doc);\n\n        if (matchResult.result) {\n          if (options.ordered) {\n            results.push(doc);\n\n            if (distances && matchResult.distance !== undefined) {\n              distances.set(id, matchResult.distance);\n            }\n          } else {\n            results.set(id, doc);\n          }\n        } // Override to ensure all docs are matched if ignoring skip & limit\n\n\n        if (!applySkipLimit) {\n          return true;\n        } // Fast path for limited unsorted queries.\n        // XXX 'length' check here seems wrong for ordered\n\n\n        return !_this6.limit || _this6.skip || _this6.sorter || results.length !== _this6.limit;\n      });\n\n      if (!options.ordered) {\n        return results;\n      }\n\n      if (this.sorter) {\n        results.sort(this.sorter.getComparator({\n          distances: distances\n        }));\n      } // Return the full set of results if there is no skip or limit or if we're\n      // ignoring them\n\n\n      if (!applySkipLimit || !this.limit && !this.skip) {\n        return results;\n      }\n\n      return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);\n    }\n\n    return _getRawObjects;\n  }();\n\n  _proto._publishCursor = function () {\n    function _publishCursor(subscription) {\n      // XXX minimongo should not depend on mongo-livedata!\n      if (!Package.mongo) {\n        throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');\n      }\n\n      if (!this.collection.name) {\n        throw new Error('Can\\'t publish a cursor from a collection without a name.');\n      }\n\n      return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);\n    }\n\n    return _publishCursor;\n  }();\n\n  return Cursor;\n}(Symbol.iterator, Symbol.asyncIterator);\n\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(function (method) {\n  var asyncName = getAsyncMethodName(method);\n\n  Cursor.prototype[asyncName] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return Promise.resolve(this[method].apply(this, args));\n  };\n});","map":{"version":3,"sources":["packages/minimongo/cursor.js"],"names":["_regeneratorRuntime","module","link","default","v","export","Cursor","LocalCollection","hasOwn","ASYNC_CURSOR_METHODS","getAsyncMethodName","collection","selector","options","sorter","matcher","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","call","_id","undefined","hasGeoQuery","sort","Sorter","skip","limit","fields","projection","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","_depend","added","removed","_getRawObjects","ordered","length","fetch","result","forEach","doc","push","addedBefore","changed","movedBefore","index","objects","next","element","value","done","syncResult","Symbol","iterator","Promise","resolve","callback","thisArg","i","getTransform","map","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","Error","distances","_IdMap","query","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","fn","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","EJSON","clone","handle","Object","assign","ObserveHandle","stop","active","onInvalidate","drain","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","name","applySkipLimit","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","distance","getComparator","slice","_publishCursor","subscription","Package","mongo","Mongo","Collection","asyncIterator","method","asyncName","prototype"],"mappings":"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","sourcesContent":["import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\nimport { ASYNC_CURSOR_METHODS, getAsyncMethodName } from \"./constants\";\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count() {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  [Symbol.asyncIterator]() {\n    const syncResult = this[Symbol.iterator]();\n    return {\n      async next() {\n        return Promise.resolve(syncResult.next());\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      query.results.forEach(doc => {\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(method => {\n  const asyncName = getAsyncMethodName(method);\n  Cursor.prototype[asyncName] = function(...args) {\n    return Promise.resolve(this[method].apply(this, args));\n  };\n});\n"]},"sourceType":"module","externalDependencies":{},"hash":"9f0f8ee388f1a45f28a66315aa6163ded704ef5a"}
