{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/mongo/mongo_driver.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/mongo/mongo_driver.js","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/mongo/mongo_driver.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/packages/mongo/mongo_driver.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/mongo_driver.js"}},"code":"!function (module1) {\n  let _objectSpread;\n\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n\n  }, 0);\n  let normalizeProjection;\n  module1.link(\"./mongo_utils\", {\n    normalizeProjection(v) {\n      normalizeProjection = v;\n    }\n\n  }, 0);\n  let DocFetcher;\n  module1.link(\"./doc_fetcher.js\", {\n    DocFetcher(v) {\n      DocFetcher = v;\n    }\n\n  }, 1);\n  let ASYNC_CURSOR_METHODS, getAsyncMethodName;\n  module1.link(\"meteor/minimongo/constants\", {\n    ASYNC_CURSOR_METHODS(v) {\n      ASYNC_CURSOR_METHODS = v;\n    },\n\n    getAsyncMethodName(v) {\n      getAsyncMethodName = v;\n    }\n\n  }, 2);\n\n  /**\n   * Provide a synchronous Collection API using fibers, backed by\n   * MongoDB.  This is only for use on the server, and mostly identical\n   * to the client API.\n   *\n   * NOTE: the public API methods must be run within a fiber. If you call\n   * these outside of a fiber they will explode!\n   */\n  const path = require(\"path\");\n\n  const util = require(\"util\");\n  /** @type {import('mongodb')} */\n\n\n  var MongoDB = NpmModuleMongodb;\n\n  var Future = Npm.require('fibers/future');\n\n  MongoInternals = {};\n  MongoInternals.NpmModules = {\n    mongodb: {\n      version: NpmModuleMongodbVersion,\n      module: MongoDB\n    }\n  }; // Older version of what is now available via\n  // MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n  // people do use it.\n  // XXX COMPAT WITH 1.0.3.2\n\n  MongoInternals.NpmModule = MongoDB;\n  const FILE_ASSET_SUFFIX = 'Asset';\n  const ASSETS_FOLDER = 'assets';\n  const APP_FOLDER = 'app'; // This is used to add or remove EJSON from the beginning of everything nested\n  // inside an EJSON custom type. It should only be called on pure JSON!\n\n  var replaceNames = function (filter, thing) {\n    if (typeof thing === \"object\" && thing !== null) {\n      if (_.isArray(thing)) {\n        return _.map(thing, _.bind(replaceNames, null, filter));\n      }\n\n      var ret = {};\n\n      _.each(thing, function (value, key) {\n        ret[filter(key)] = replaceNames(filter, value);\n      });\n\n      return ret;\n    }\n\n    return thing;\n  }; // Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n  // doing a structural clone).\n  // XXX how ok is this? what if there are multiple copies of MongoDB loaded?\n\n\n  MongoDB.Timestamp.prototype.clone = function () {\n    // Timestamps should be immutable.\n    return this;\n  };\n\n  var makeMongoLegal = function (name) {\n    return \"EJSON\" + name;\n  };\n\n  var unmakeMongoLegal = function (name) {\n    return name.substr(5);\n  };\n\n  var replaceMongoAtomWithMeteor = function (document) {\n    if (document instanceof MongoDB.Binary) {\n      // for backwards compatibility\n      if (document.sub_type !== 0) {\n        return document;\n      }\n\n      var buffer = document.value(true);\n      return new Uint8Array(buffer);\n    }\n\n    if (document instanceof MongoDB.ObjectID) {\n      return new Mongo.ObjectID(document.toHexString());\n    }\n\n    if (document instanceof MongoDB.Decimal128) {\n      return Decimal(document.toString());\n    }\n\n    if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n      return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n    }\n\n    if (document instanceof MongoDB.Timestamp) {\n      // For now, the Meteor representation of a Mongo timestamp type (not a date!\n      // this is a weird internal thing used in the oplog!) is the same as the\n      // Mongo representation. We need to do this explicitly or else we would do a\n      // structural clone and lose the prototype.\n      return document;\n    }\n\n    return undefined;\n  };\n\n  var replaceMeteorAtomWithMongo = function (document) {\n    if (EJSON.isBinary(document)) {\n      // This does more copies than we'd like, but is necessary because\n      // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n      // serialize it correctly).\n      return new MongoDB.Binary(Buffer.from(document));\n    }\n\n    if (document instanceof MongoDB.Binary) {\n      return document;\n    }\n\n    if (document instanceof Mongo.ObjectID) {\n      return new MongoDB.ObjectID(document.toHexString());\n    }\n\n    if (document instanceof MongoDB.Timestamp) {\n      // For now, the Meteor representation of a Mongo timestamp type (not a date!\n      // this is a weird internal thing used in the oplog!) is the same as the\n      // Mongo representation. We need to do this explicitly or else we would do a\n      // structural clone and lose the prototype.\n      return document;\n    }\n\n    if (document instanceof Decimal) {\n      return MongoDB.Decimal128.fromString(document.toString());\n    }\n\n    if (EJSON._isCustomType(document)) {\n      return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n    } // It is not ordinarily possible to stick dollar-sign keys into mongo\n    // so we don't bother checking for things that need escaping at this time.\n\n\n    return undefined;\n  };\n\n  var replaceTypes = function (document, atomTransformer) {\n    if (typeof document !== 'object' || document === null) return document;\n    var replacedTopLevelAtom = atomTransformer(document);\n    if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;\n    var ret = document;\n\n    _.each(document, function (val, key) {\n      var valReplaced = replaceTypes(val, atomTransformer);\n\n      if (val !== valReplaced) {\n        // Lazy clone. Shallow copy.\n        if (ret === document) ret = _.clone(document);\n        ret[key] = valReplaced;\n      }\n    });\n\n    return ret;\n  };\n\n  MongoConnection = function (url, options) {\n    var _Meteor$settings, _Meteor$settings$pack, _Meteor$settings$pack2;\n\n    var self = this;\n    options = options || {};\n    self._observeMultiplexers = {};\n    self._onFailoverHook = new Hook();\n\n    const userOptions = _objectSpread(_objectSpread({}, Mongo._connectionOptions || {}), ((_Meteor$settings = Meteor.settings) === null || _Meteor$settings === void 0 ? void 0 : (_Meteor$settings$pack = _Meteor$settings.packages) === null || _Meteor$settings$pack === void 0 ? void 0 : (_Meteor$settings$pack2 = _Meteor$settings$pack.mongo) === null || _Meteor$settings$pack2 === void 0 ? void 0 : _Meteor$settings$pack2.options) || {});\n\n    var mongoOptions = Object.assign({\n      ignoreUndefined: true\n    }, userOptions); // Internally the oplog connections specify their own maxPoolSize\n    // which we don't want to overwrite with any user defined value\n\n    if (_.has(options, 'maxPoolSize')) {\n      // If we just set this for \"server\", replSet will override it. If we just\n      // set it for replSet, it will be ignored if we're not using a replSet.\n      mongoOptions.maxPoolSize = options.maxPoolSize;\n    } // Transform options like \"tlsCAFileAsset\": \"filename.pem\" into\n    // \"tlsCAFile\": \"/<fullpath>/filename.pem\"\n\n\n    Object.entries(mongoOptions || {}).filter(_ref => {\n      let [key] = _ref;\n      return key && key.endsWith(FILE_ASSET_SUFFIX);\n    }).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      const optionName = key.replace(FILE_ASSET_SUFFIX, '');\n      mongoOptions[optionName] = path.join(Assets.getServerDir(), ASSETS_FOLDER, APP_FOLDER, value);\n      delete mongoOptions[key];\n    });\n    self.db = null;\n    self._oplogHandle = null;\n    self._docFetcher = null;\n    self.client = new MongoDB.MongoClient(url, mongoOptions);\n    self.db = self.client.db();\n    self.client.on('serverDescriptionChanged', Meteor.bindEnvironment(event => {\n      // When the connection is no longer against the primary node, execute all\n      // failover hooks. This is important for the driver as it has to re-pool the\n      // query when it happens.\n      if (event.previousDescription.type !== 'RSPrimary' && event.newDescription.type === 'RSPrimary') {\n        self._onFailoverHook.each(callback => {\n          callback();\n          return true;\n        });\n      }\n    }));\n\n    if (options.oplogUrl && !Package['disable-oplog']) {\n      self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n      self._docFetcher = new DocFetcher(self);\n    }\n  };\n\n  MongoConnection.prototype.close = function () {\n    var self = this;\n    if (!self.db) throw Error(\"close called before Connection created?\"); // XXX probably untested\n\n    var oplogHandle = self._oplogHandle;\n    self._oplogHandle = null;\n    if (oplogHandle) oplogHandle.stop(); // Use Future.wrap so that errors get thrown. This happens to\n    // work even outside a fiber since the 'close' method is not\n    // actually asynchronous.\n\n    Future.wrap(_.bind(self.client.close, self.client))(true).wait();\n  }; // Returns the Mongo Collection object; may yield.\n\n\n  MongoConnection.prototype.rawCollection = function (collectionName) {\n    var self = this;\n    if (!self.db) throw Error(\"rawCollection called before Connection created?\");\n    return self.db.collection(collectionName);\n  };\n\n  MongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {\n    var self = this;\n    if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");\n    var future = new Future();\n    self.db.createCollection(collectionName, {\n      capped: true,\n      size: byteSize,\n      max: maxDocuments\n    }, future.resolver());\n    future.wait();\n  }; // This should be called synchronously with a write, to create a\n  // transaction on the current write fence, if any. After we can read\n  // the write, and after observers have been notified (or at least,\n  // after the observer notifiers have added themselves to the write\n  // fence), you should call 'committed()' on the object returned.\n\n\n  MongoConnection.prototype._maybeBeginWrite = function () {\n    var fence = DDPServer._CurrentWriteFence.get();\n\n    if (fence) {\n      return fence.beginWrite();\n    } else {\n      return {\n        committed: function () {}\n      };\n    }\n  }; // Internal interface: adds a callback which is called when the Mongo primary\n  // changes. Returns a stop handle.\n\n\n  MongoConnection.prototype._onFailover = function (callback) {\n    return this._onFailoverHook.register(callback);\n  }; //////////// Public API //////////\n  // The write methods block until the database has confirmed the write (it may\n  // not be replicated or stable on disk, but one server has confirmed it) if no\n  // callback is provided. If a callback is provided, then they call the callback\n  // when the write is confirmed. They return nothing on success, and raise an\n  // exception on failure.\n  //\n  // After making a write (with insert, update, remove), observers are\n  // notified asynchronously. If you want to receive a callback once all\n  // of the observer notifications have landed for your write, do the\n  // writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n  // _WriteFence, and then set a callback on the write fence.)\n  //\n  // Since our execution environment is single-threaded, this is\n  // well-defined -- a write \"has been made\" if it's returned, and an\n  // observer \"has been notified\" if its callback has returned.\n\n\n  var writeCallback = function (write, refresh, callback) {\n    return function (err, result) {\n      if (!err) {\n        // XXX We don't have to run this on error, right?\n        try {\n          refresh();\n        } catch (refreshErr) {\n          if (callback) {\n            callback(refreshErr);\n            return;\n          } else {\n            throw refreshErr;\n          }\n        }\n      }\n\n      write.committed();\n\n      if (callback) {\n        callback(err, result);\n      } else if (err) {\n        throw err;\n      }\n    };\n  };\n\n  var bindEnvironmentForWrite = function (callback) {\n    return Meteor.bindEnvironment(callback, \"Mongo write\");\n  };\n\n  MongoConnection.prototype._insert = function (collection_name, document, callback) {\n    var self = this;\n\n    var sendError = function (e) {\n      if (callback) return callback(e);\n      throw e;\n    };\n\n    if (collection_name === \"___meteor_failure_test_collection\") {\n      var e = new Error(\"Failure test\");\n      e._expectedByTest = true;\n      sendError(e);\n      return;\n    }\n\n    if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {\n      sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));\n      return;\n    }\n\n    var write = self._maybeBeginWrite();\n\n    var refresh = function () {\n      Meteor.refresh({\n        collection: collection_name,\n        id: document._id\n      });\n    };\n\n    callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n    try {\n      var collection = self.rawCollection(collection_name);\n      collection.insertOne(replaceTypes(document, replaceMeteorAtomWithMongo), {\n        safe: true\n      }).then(_ref3 => {\n        let {\n          insertedId\n        } = _ref3;\n        callback(null, insertedId);\n      }).catch(e => {\n        callback(e, null);\n      });\n    } catch (err) {\n      write.committed();\n      throw err;\n    }\n  }; // Cause queries that may be affected by the selector to poll in this write\n  // fence.\n\n\n  MongoConnection.prototype._refresh = function (collectionName, selector) {\n    var refreshKey = {\n      collection: collectionName\n    }; // If we know which documents we're removing, don't poll queries that are\n    // specific to other documents. (Note that multiple notifications here should\n    // not cause multiple polls, since all our listener is doing is enqueueing a\n    // poll.)\n\n    var specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      _.each(specificIds, function (id) {\n        Meteor.refresh(_.extend({\n          id: id\n        }, refreshKey));\n      });\n    } else {\n      Meteor.refresh(refreshKey);\n    }\n  };\n\n  MongoConnection.prototype._remove = function (collection_name, selector, callback) {\n    var self = this;\n\n    if (collection_name === \"___meteor_failure_test_collection\") {\n      var e = new Error(\"Failure test\");\n      e._expectedByTest = true;\n\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    }\n\n    var write = self._maybeBeginWrite();\n\n    var refresh = function () {\n      self._refresh(collection_name, selector);\n    };\n\n    callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n    try {\n      var collection = self.rawCollection(collection_name);\n      collection.deleteMany(replaceTypes(selector, replaceMeteorAtomWithMongo), {\n        safe: true\n      }).then(_ref4 => {\n        let {\n          deletedCount\n        } = _ref4;\n        callback(null, transformResult({\n          result: {\n            modifiedCount: deletedCount\n          }\n        }).numberAffected);\n      }).catch(err => {\n        callback(err);\n      });\n    } catch (err) {\n      write.committed();\n      throw err;\n    }\n  };\n\n  MongoConnection.prototype._dropCollection = function (collectionName, cb) {\n    var self = this;\n\n    var write = self._maybeBeginWrite();\n\n    var refresh = function () {\n      Meteor.refresh({\n        collection: collectionName,\n        id: null,\n        dropCollection: true\n      });\n    };\n\n    cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n    try {\n      var collection = self.rawCollection(collectionName);\n      collection.drop(cb);\n    } catch (e) {\n      write.committed();\n      throw e;\n    }\n  }; // For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n  // because it lets the test's fence wait for it to be complete.\n\n\n  MongoConnection.prototype._dropDatabase = function (cb) {\n    var self = this;\n\n    var write = self._maybeBeginWrite();\n\n    var refresh = function () {\n      Meteor.refresh({\n        dropDatabase: true\n      });\n    };\n\n    cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n    try {\n      self.db.dropDatabase(cb);\n    } catch (e) {\n      write.committed();\n      throw e;\n    }\n  };\n\n  MongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {\n    var self = this;\n\n    if (!callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (collection_name === \"___meteor_failure_test_collection\") {\n      var e = new Error(\"Failure test\");\n      e._expectedByTest = true;\n\n      if (callback) {\n        return callback(e);\n      } else {\n        throw e;\n      }\n    } // explicit safety check. null and undefined can crash the mongo\n    // driver. Although the node driver and minimongo do 'support'\n    // non-object modifier in that they don't crash, they are not\n    // meaningful operations and do not do anything. Defensively throw an\n    // error here.\n\n\n    if (!mod || typeof mod !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n    if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {\n      throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");\n    }\n\n    if (!options) options = {};\n\n    var write = self._maybeBeginWrite();\n\n    var refresh = function () {\n      self._refresh(collection_name, selector);\n    };\n\n    callback = writeCallback(write, refresh, callback);\n\n    try {\n      var collection = self.rawCollection(collection_name);\n      var mongoOpts = {\n        safe: true\n      }; // Add support for filtered positional operator\n\n      if (options.arrayFilters !== undefined) mongoOpts.arrayFilters = options.arrayFilters; // explictly enumerate options that minimongo supports\n\n      if (options.upsert) mongoOpts.upsert = true;\n      if (options.multi) mongoOpts.multi = true; // Lets you get a more more full result from MongoDB. Use with caution:\n      // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n      // with simulated upsert.\n\n      if (options.fullResult) mongoOpts.fullResult = true;\n      var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n      var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n      var isModify = LocalCollection._isModificationMod(mongoMod);\n\n      if (options._forbidReplace && !isModify) {\n        var err = new Error(\"Invalid modifier. Replacements are forbidden.\");\n\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      } // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n      // selector and mod.  We assume it doesn't matter, as far as\n      // the behavior of modifiers is concerned, whether `_modify`\n      // is run on EJSON or on mongo-converted EJSON.\n      // Run this code up front so that it fails fast if someone uses\n      // a Mongo update operator we don't support.\n\n\n      let knownId;\n\n      if (options.upsert) {\n        try {\n          let newDoc = LocalCollection._createUpsertDocument(selector, mod);\n\n          knownId = newDoc._id;\n        } catch (err) {\n          if (callback) {\n            return callback(err);\n          } else {\n            throw err;\n          }\n        }\n      }\n\n      if (options.upsert && !isModify && !knownId && options.insertedId && !(options.insertedId instanceof Mongo.ObjectID && options.generatedId)) {\n        // In case of an upsert with a replacement, where there is no _id defined\n        // in either the query or the replacement doc, mongo will generate an id itself.\n        // Therefore we need this special strategy if we want to control the id ourselves.\n        // We don't need to do this when:\n        // - This is not a replacement, so we can add an _id to $setOnInsert\n        // - The id is defined by query or mod we can just add it to the replacement doc\n        // - The user did not specify any id preference and the id is a Mongo ObjectId,\n        //     then we can just let Mongo generate the id\n        simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, options, // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (error, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && !options._returnObject) {\n            callback(error, result.numberAffected);\n          } else {\n            callback(error, result);\n          }\n        });\n      } else {\n        if (options.upsert && !knownId && options.insertedId && isModify) {\n          if (!mongoMod.hasOwnProperty('$setOnInsert')) {\n            mongoMod.$setOnInsert = {};\n          }\n\n          knownId = options.insertedId;\n          Object.assign(mongoMod.$setOnInsert, replaceTypes({\n            _id: options.insertedId\n          }, replaceMeteorAtomWithMongo));\n        }\n\n        const strings = Object.keys(mongoMod).filter(key => !key.startsWith(\"$\"));\n        let updateMethod = strings.length > 0 ? 'replaceOne' : 'updateMany';\n        updateMethod = updateMethod === 'updateMany' && !mongoOpts.multi ? 'updateOne' : updateMethod;\n        collection[updateMethod].bind(collection)(mongoSelector, mongoMod, mongoOpts, // mongo driver now returns undefined for err in the callback\n        bindEnvironmentForWrite(function () {\n          let err = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          let result = arguments.length > 1 ? arguments[1] : undefined;\n\n          if (!err) {\n            var meteorResult = transformResult({\n              result\n            });\n\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && meteorResult.insertedId) {\n                if (knownId) {\n                  meteorResult.insertedId = knownId;\n                } else if (meteorResult.insertedId instanceof MongoDB.ObjectID) {\n                  meteorResult.insertedId = new Mongo.ObjectID(meteorResult.insertedId.toHexString());\n                }\n              }\n\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n      }\n    } catch (e) {\n      write.committed();\n      throw e;\n    }\n  };\n\n  var transformResult = function (driverResult) {\n    var meteorResult = {\n      numberAffected: 0\n    };\n\n    if (driverResult) {\n      var mongoResult = driverResult.result; // On updates with upsert:true, the inserted values come as a list of\n      // upserted values -- even with options.multi, when the upsert does insert,\n      // it only inserts one element.\n\n      if (mongoResult.upsertedCount) {\n        meteorResult.numberAffected = mongoResult.upsertedCount;\n\n        if (mongoResult.upsertedId) {\n          meteorResult.insertedId = mongoResult.upsertedId;\n        }\n      } else {\n        // n was used before Mongo 5.0, in Mongo 5.0 we are not receiving this n\n        // field and so we are using modifiedCount instead\n        meteorResult.numberAffected = mongoResult.n || mongoResult.matchedCount || mongoResult.modifiedCount;\n      }\n    }\n\n    return meteorResult;\n  };\n\n  var NUM_OPTIMISTIC_TRIES = 3; // exposed for testing\n\n  MongoConnection._isCannotChangeIdError = function (err) {\n    // Mongo 3.2.* returns error as next Object:\n    // {name: String, code: Number, errmsg: String}\n    // Older Mongo returns:\n    // {name: String, code: Number, err: String}\n    var error = err.errmsg || err.err; // We don't use the error code here\n    // because the error code we observed it producing (16837) appears to be\n    // a far more generic error code based on examining the source.\n\n    if (error.indexOf('The _id field cannot be changed') === 0 || error.indexOf(\"the (immutable) field '_id' was found to have been altered to _id\") !== -1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var simulateUpsertWithInsertedId = function (collection, selector, mod, options, callback) {\n    // STRATEGY: First try doing an upsert with a generated ID.\n    // If this throws an error about changing the ID on an existing document\n    // then without affecting the database, we know we should probably try\n    // an update without the generated ID. If it affected 0 documents,\n    // then without affecting the database, we the document that first\n    // gave the error is probably removed and we need to try an insert again\n    // We go back to step one and repeat.\n    // Like all \"optimistic write\" schemes, we rely on the fact that it's\n    // unlikely our writes will continue to be interfered with under normal\n    // circumstances (though sufficiently heavy contention with writers\n    // disagreeing on the existence of an object will cause writes to fail\n    // in theory).\n    var insertedId = options.insertedId; // must exist\n\n    var mongoOptsForUpdate = {\n      safe: true,\n      multi: options.multi\n    };\n    var mongoOptsForInsert = {\n      safe: true,\n      upsert: true\n    };\n    var replacementWithId = Object.assign(replaceTypes({\n      _id: insertedId\n    }, replaceMeteorAtomWithMongo), mod);\n    var tries = NUM_OPTIMISTIC_TRIES;\n\n    var doUpdate = function () {\n      tries--;\n\n      if (!tries) {\n        callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n      } else {\n        let method = collection.updateMany;\n\n        if (!Object.keys(mod).some(key => key.startsWith(\"$\"))) {\n          method = collection.replaceOne.bind(collection);\n        }\n\n        method(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {\n          if (err) {\n            callback(err);\n          } else if (result && (result.modifiedCount || result.upsertedCount)) {\n            callback(null, {\n              numberAffected: result.modifiedCount || result.upsertedCount,\n              insertedId: result.upsertedId || undefined\n            });\n          } else {\n            doConditionalInsert();\n          }\n        }));\n      }\n    };\n\n    var doConditionalInsert = function () {\n      collection.replaceOne(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n        if (err) {\n          // figure out if this is a\n          // \"cannot change _id of document\" error, and\n          // if so, try doUpdate() again, up to 3 times.\n          if (MongoConnection._isCannotChangeIdError(err)) {\n            doUpdate();\n          } else {\n            callback(err);\n          }\n        } else {\n          callback(null, {\n            numberAffected: result.upsertedCount,\n            insertedId: result.upsertedId\n          });\n        }\n      }));\n    };\n\n    doUpdate();\n  };\n\n  _.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n    MongoConnection.prototype[method] = function\n      /* arguments */\n    () {\n      var self = this;\n      return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n    };\n  }); // XXX MongoConnection.upsert() does not return the id of the inserted document\n  // unless you set it explicitly in the selector or modifier (as a replacement\n  // doc).\n\n\n  MongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {\n    var self = this;\n\n    if (typeof options === \"function\" && !callback) {\n      callback = options;\n      options = {};\n    }\n\n    return self.update(collectionName, selector, mod, _.extend({}, options, {\n      upsert: true,\n      _returnObject: true\n    }), callback);\n  };\n\n  MongoConnection.prototype.find = function (collectionName, selector, options) {\n    var self = this;\n    if (arguments.length === 1) selector = {};\n    return new Cursor(self, new CursorDescription(collectionName, selector, options));\n  };\n\n  MongoConnection.prototype.findOne = function (collection_name, selector, options) {\n    var self = this;\n    if (arguments.length === 1) selector = {};\n    options = options || {};\n    options.limit = 1;\n    return self.find(collection_name, selector, options).fetch()[0];\n  }; // We'll actually design an index API later. For now, we just pass through to\n  // Mongo's, but make it synchronous.\n\n\n  MongoConnection.prototype.createIndex = function (collectionName, index, options) {\n    var self = this; // We expect this function to be called at startup, not from within a method,\n    // so we don't interact with the write fence.\n\n    var collection = self.rawCollection(collectionName);\n    var future = new Future();\n    var indexName = collection.createIndex(index, options, future.resolver());\n    future.wait();\n  };\n\n  MongoConnection.prototype._ensureIndex = MongoConnection.prototype.createIndex;\n\n  MongoConnection.prototype._dropIndex = function (collectionName, index) {\n    var self = this; // This function is only used by test code, not within a method, so we don't\n    // interact with the write fence.\n\n    var collection = self.rawCollection(collectionName);\n    var future = new Future();\n    var indexName = collection.dropIndex(index, future.resolver());\n    future.wait();\n  }; // CURSORS\n  // There are several classes which relate to cursors:\n  //\n  // CursorDescription represents the arguments used to construct a cursor:\n  // collectionName, selector, and (find) options.  Because it is used as a key\n  // for cursor de-dup, everything in it should either be JSON-stringifiable or\n  // not affect observeChanges output (eg, options.transform functions are not\n  // stringifiable but do not affect observeChanges).\n  //\n  // SynchronousCursor is a wrapper around a MongoDB cursor\n  // which includes fully-synchronous versions of forEach, etc.\n  //\n  // Cursor is the cursor object returned from find(), which implements the\n  // documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n  // SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n  // like fetch or forEach on it).\n  //\n  // ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n  // reference to an ObserveMultiplexer.\n  //\n  // ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n  // single observe driver.\n  //\n  // There are two \"observe drivers\" which drive ObserveMultiplexers:\n  //   - PollingObserveDriver caches the results of a query and reruns it when\n  //     necessary.\n  //   - OplogObserveDriver follows the Mongo operation log to directly observe\n  //     database changes.\n  // Both implementations follow the same simple interface: when you create them,\n  // they start sending observeChanges callbacks (and a ready() invocation) to\n  // their ObserveMultiplexer, and you stop them by calling their stop() method.\n\n\n  CursorDescription = function (collectionName, selector, options) {\n    var self = this;\n    self.collectionName = collectionName;\n    self.selector = Mongo.Collection._rewriteSelector(selector);\n    self.options = options || {};\n  };\n\n  Cursor = function (mongo, cursorDescription) {\n    var self = this;\n    self._mongo = mongo;\n    self._cursorDescription = cursorDescription;\n    self._synchronousCursor = null;\n  };\n\n  function setupSynchronousCursor(cursor, method) {\n    // You can only observe a tailable cursor.\n    if (cursor._cursorDescription.options.tailable) throw new Error('Cannot call ' + method + ' on a tailable cursor');\n\n    if (!cursor._synchronousCursor) {\n      cursor._synchronousCursor = cursor._mongo._createSynchronousCursor(cursor._cursorDescription, {\n        // Make sure that the \"cursor\" argument to forEach/map callbacks is the\n        // Cursor, not the SynchronousCursor.\n        selfForIteration: cursor,\n        useTransform: true\n      });\n    }\n\n    return cursor._synchronousCursor;\n  }\n\n  [...ASYNC_CURSOR_METHODS, Symbol.iterator, Symbol.asyncIterator].forEach(methodName => {\n    Cursor.prototype[methodName] = function () {\n      const cursor = setupSynchronousCursor(this, methodName);\n      return cursor[methodName](...arguments);\n    }; // These methods are handled separately.\n\n\n    if (methodName === Symbol.iterator || methodName === Symbol.asyncIterator) {\n      return;\n    }\n\n    const methodNameAsync = getAsyncMethodName(methodName);\n\n    Cursor.prototype[methodNameAsync] = function () {\n      return Promise.resolve(this[methodName](...arguments));\n    };\n  });\n\n  Cursor.prototype.getTransform = function () {\n    return this._cursorDescription.options.transform;\n  }; // When you call Meteor.publish() with a function that returns a Cursor, we need\n  // to transmute it into the equivalent subscription.  This is the function that\n  // does that.\n\n\n  Cursor.prototype._publishCursor = function (sub) {\n    var self = this;\n    var collection = self._cursorDescription.collectionName;\n    return Mongo.Collection._publishCursor(self, sub, collection);\n  }; // Used to guarantee that publish functions return at most one cursor per\n  // collection. Private, because we might later have cursors that include\n  // documents from multiple collections somehow.\n\n\n  Cursor.prototype._getCollectionName = function () {\n    var self = this;\n    return self._cursorDescription.collectionName;\n  };\n\n  Cursor.prototype.observe = function (callbacks) {\n    var self = this;\n    return LocalCollection._observeFromObserveChanges(self, callbacks);\n  };\n\n  Cursor.prototype.observeChanges = function (callbacks) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var self = this;\n    var methods = ['addedAt', 'added', 'changedAt', 'changed', 'removedAt', 'removed', 'movedTo'];\n\n    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n\n    let exceptionName = callbacks._fromObserve ? 'observe' : 'observeChanges';\n    exceptionName += ' callback';\n    methods.forEach(function (method) {\n      if (callbacks[method] && typeof callbacks[method] == \"function\") {\n        callbacks[method] = Meteor.bindEnvironment(callbacks[method], method + exceptionName);\n      }\n    });\n    return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks, options.nonMutatingCallbacks);\n  };\n\n  MongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {\n    var self = this;\n    options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n    var collection = self.rawCollection(cursorDescription.collectionName);\n    var cursorOptions = cursorDescription.options;\n    var mongoOptions = {\n      sort: cursorOptions.sort,\n      limit: cursorOptions.limit,\n      skip: cursorOptions.skip,\n      projection: cursorOptions.fields || cursorOptions.projection,\n      readPreference: cursorOptions.readPreference\n    }; // Do we want a tailable cursor (which only works on capped collections)?\n\n    if (cursorOptions.tailable) {\n      mongoOptions.numberOfRetries = -1;\n    }\n\n    var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), mongoOptions); // Do we want a tailable cursor (which only works on capped collections)?\n\n    if (cursorOptions.tailable) {\n      // We want a tailable cursor...\n      dbCursor.addCursorFlag(\"tailable\", true); // ... and for the server to wait a bit if any getMore has no data (rather\n      // than making us put the relevant sleeps in the client)...\n\n      dbCursor.addCursorFlag(\"awaitData\", true); // And if this is on the oplog collection and the cursor specifies a 'ts',\n      // then set the undocumented oplog replay flag, which does a special scan to\n      // find the first document (instead of creating an index on ts). This is a\n      // very hard-coded Mongo flag which only works on the oplog collection and\n      // only works with the ts field.\n\n      if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {\n        dbCursor.addCursorFlag(\"oplogReplay\", true);\n      }\n    }\n\n    if (typeof cursorOptions.maxTimeMs !== 'undefined') {\n      dbCursor = dbCursor.maxTimeMS(cursorOptions.maxTimeMs);\n    }\n\n    if (typeof cursorOptions.hint !== 'undefined') {\n      dbCursor = dbCursor.hint(cursorOptions.hint);\n    }\n\n    return new SynchronousCursor(dbCursor, cursorDescription, options, collection);\n  };\n\n  var SynchronousCursor = function (dbCursor, cursorDescription, options, collection) {\n    var self = this;\n    options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n    self._dbCursor = dbCursor;\n    self._cursorDescription = cursorDescription; // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n    // inside a user-visible Cursor, we want to provide the outer cursor!\n\n    self._selfForIteration = options.selfForIteration || self;\n\n    if (options.useTransform && cursorDescription.options.transform) {\n      self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);\n    } else {\n      self._transform = null;\n    }\n\n    self._synchronousCount = Future.wrap(collection.countDocuments.bind(collection, replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), replaceTypes(cursorDescription.options, replaceMeteorAtomWithMongo)));\n    self._visitedIds = new LocalCollection._IdMap();\n  };\n\n  _.extend(SynchronousCursor.prototype, {\n    // Returns a Promise for the next object from the underlying cursor (before\n    // the Mongo->Meteor type replacement).\n    _rawNextObjectPromise: function () {\n      const self = this;\n      return new Promise((resolve, reject) => {\n        self._dbCursor.next((err, doc) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(doc);\n          }\n        });\n      });\n    },\n    // Returns a Promise for the next object from the cursor, skipping those whose\n    // IDs we've already seen and replacing Mongo atoms with Meteor atoms.\n    _nextObjectPromise: function () {\n      return Promise.asyncApply(() => {\n        var self = this;\n\n        while (true) {\n          var doc = Promise.await(self._rawNextObjectPromise());\n          if (!doc) return null;\n          doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n          if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n            // Did Mongo give us duplicate documents in the same cursor? If so,\n            // ignore this one. (Do this before the transform, since transform might\n            // return some unrelated value.) We don't do this for tailable cursors,\n            // because we want to maintain O(1) memory usage. And if there isn't _id\n            // for some reason (maybe it's the oplog), then we don't do this either.\n            // (Be careful to do this for falsey but existing _id, though.)\n            if (self._visitedIds.has(doc._id)) continue;\n\n            self._visitedIds.set(doc._id, true);\n          }\n\n          if (self._transform) doc = self._transform(doc);\n          return doc;\n        }\n      });\n    },\n    // Returns a promise which is resolved with the next object (like with\n    // _nextObjectPromise) or rejected if the cursor doesn't return within\n    // timeoutMS ms.\n    _nextObjectPromiseWithTimeout: function (timeoutMS) {\n      const self = this;\n\n      if (!timeoutMS) {\n        return self._nextObjectPromise();\n      }\n\n      const nextObjectPromise = self._nextObjectPromise();\n\n      const timeoutErr = new Error('Client-side timeout waiting for next object');\n      const timeoutPromise = new Promise((resolve, reject) => {\n        const timer = setTimeout(() => {\n          reject(timeoutErr);\n        }, timeoutMS);\n      });\n      return Promise.race([nextObjectPromise, timeoutPromise]).catch(err => {\n        if (err === timeoutErr) {\n          self.close();\n        }\n\n        throw err;\n      });\n    },\n    _nextObject: function () {\n      var self = this;\n      return self._nextObjectPromise().await();\n    },\n    forEach: function (callback, thisArg) {\n      var self = this; // Get back to the beginning.\n\n      self._rewind(); // We implement the loop ourself instead of using self._dbCursor.each,\n      // because \"each\" will call its callback outside of a fiber which makes it\n      // much more complex to make this function synchronous.\n\n\n      var index = 0;\n\n      while (true) {\n        var doc = self._nextObject();\n\n        if (!doc) return;\n        callback.call(thisArg, doc, index++, self._selfForIteration);\n      }\n    },\n    // XXX Allow overlapping callback executions if callback yields.\n    map: function (callback, thisArg) {\n      var self = this;\n      var res = [];\n      self.forEach(function (doc, index) {\n        res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n      });\n      return res;\n    },\n    _rewind: function () {\n      var self = this; // known to be synchronous\n\n      self._dbCursor.rewind();\n\n      self._visitedIds = new LocalCollection._IdMap();\n    },\n    // Mostly usable for tailable cursors.\n    close: function () {\n      var self = this;\n\n      self._dbCursor.close();\n    },\n    fetch: function () {\n      var self = this;\n      return self.map(_.identity);\n    },\n    count: function () {\n      var self = this;\n      return self._synchronousCount().wait();\n    },\n    // This method is NOT wrapped in Cursor.\n    getRawObjects: function (ordered) {\n      var self = this;\n\n      if (ordered) {\n        return self.fetch();\n      } else {\n        var results = new LocalCollection._IdMap();\n        self.forEach(function (doc) {\n          results.set(doc._id, doc);\n        });\n        return results;\n      }\n    }\n  });\n\n  SynchronousCursor.prototype[Symbol.iterator] = function () {\n    var self = this; // Get back to the beginning.\n\n    self._rewind();\n\n    return {\n      next() {\n        const doc = self._nextObject();\n\n        return doc ? {\n          value: doc\n        } : {\n          done: true\n        };\n      }\n\n    };\n  };\n\n  SynchronousCursor.prototype[Symbol.asyncIterator] = function () {\n    const syncResult = this[Symbol.iterator]();\n    return {\n      next() {\n        return Promise.asyncApply(() => {\n          return Promise.resolve(syncResult.next());\n        });\n      }\n\n    };\n  }; // Tails the cursor described by cursorDescription, most likely on the\n  // oplog. Calls docCallback with each document found. Ignores errors and just\n  // restarts the tail on error.\n  //\n  // If timeoutMS is set, then if we don't get a new document every timeoutMS,\n  // kill and restart the cursor. This is primarily a workaround for #8598.\n\n\n  MongoConnection.prototype.tail = function (cursorDescription, docCallback, timeoutMS) {\n    var self = this;\n    if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");\n\n    var cursor = self._createSynchronousCursor(cursorDescription);\n\n    var stopped = false;\n    var lastTS;\n\n    var loop = function () {\n      var doc = null;\n\n      while (true) {\n        if (stopped) return;\n\n        try {\n          doc = cursor._nextObjectPromiseWithTimeout(timeoutMS).await();\n        } catch (err) {\n          // There's no good way to figure out if this was actually an error from\n          // Mongo, or just client-side (including our own timeout error). Ah\n          // well. But either way, we need to retry the cursor (unless the failure\n          // was because the observe got stopped).\n          doc = null;\n        } // Since we awaited a promise above, we need to check again to see if\n        // we've been stopped before calling the callback.\n\n\n        if (stopped) return;\n\n        if (doc) {\n          // If a tailable cursor contains a \"ts\" field, use it to recreate the\n          // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n          // the oplog, and there's a special flag that lets you do binary search\n          // on it instead of needing to use an index.)\n          lastTS = doc.ts;\n          docCallback(doc);\n        } else {\n          var newSelector = _.clone(cursorDescription.selector);\n\n          if (lastTS) {\n            newSelector.ts = {\n              $gt: lastTS\n            };\n          }\n\n          cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options)); // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n          // setTimeout, we peg the CPU at 100% and never notice the actual\n          // failover.\n\n          Meteor.setTimeout(loop, 100);\n          break;\n        }\n      }\n    };\n\n    Meteor.defer(loop);\n    return {\n      stop: function () {\n        stopped = true;\n        cursor.close();\n      }\n    };\n  };\n\n  MongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks, nonMutatingCallbacks) {\n    var self = this;\n\n    if (cursorDescription.options.tailable) {\n      return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n    } // You may not filter out _id when observing changes, because the id is a core\n    // part of the observeChanges API.\n\n\n    const fieldsOptions = cursorDescription.options.projection || cursorDescription.options.fields;\n\n    if (fieldsOptions && (fieldsOptions._id === 0 || fieldsOptions._id === false)) {\n      throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n    }\n\n    var observeKey = EJSON.stringify(_.extend({\n      ordered: ordered\n    }, cursorDescription));\n    var multiplexer, observeDriver;\n    var firstHandle = false; // Find a matching ObserveMultiplexer, or create a new one. This next block is\n    // guaranteed to not yield (and it doesn't call anything that can observe a\n    // new query), so no other calls to this function can interleave with it.\n\n    Meteor._noYieldsAllowed(function () {\n      if (_.has(self._observeMultiplexers, observeKey)) {\n        multiplexer = self._observeMultiplexers[observeKey];\n      } else {\n        firstHandle = true; // Create a new ObserveMultiplexer.\n\n        multiplexer = new ObserveMultiplexer({\n          ordered: ordered,\n          onStop: function () {\n            delete self._observeMultiplexers[observeKey];\n            observeDriver.stop();\n          }\n        });\n        self._observeMultiplexers[observeKey] = multiplexer;\n      }\n    });\n\n    var observeHandle = new ObserveHandle(multiplexer, callbacks, nonMutatingCallbacks);\n\n    if (firstHandle) {\n      var matcher, sorter;\n\n      var canUseOplog = _.all([function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort) return true;\n\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) {\n        return f();\n      }); // invoke each function\n\n\n      var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n      observeDriver = new driverClass({\n        cursorDescription: cursorDescription,\n        mongoHandle: self,\n        multiplexer: multiplexer,\n        ordered: ordered,\n        matcher: matcher,\n        // ignored by polling\n        sorter: sorter,\n        // ignored by polling\n        _testOnlyPollCallback: callbacks._testOnlyPollCallback\n      }); // This field is only set for use in tests.\n\n      multiplexer._observeDriver = observeDriver;\n    } // Blocks until the initial adds have been sent.\n\n\n    multiplexer.addHandleAndSendInitialAdds(observeHandle);\n    return observeHandle;\n  }; // Listen for the invalidation messages that will trigger us to poll the\n  // database for changes. If this selector specifies specific IDs, specify them\n  // here, so that updates to different specific IDs don't cause us to poll.\n  // listenCallback is the same kind of (notification, complete) callback passed\n  // to InvalidationCrossbar.listen.\n\n\n  listenAll = function (cursorDescription, listenCallback) {\n    var listeners = [];\n    forEachTrigger(cursorDescription, function (trigger) {\n      listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));\n    });\n    return {\n      stop: function () {\n        _.each(listeners, function (listener) {\n          listener.stop();\n        });\n      }\n    };\n  };\n\n  forEachTrigger = function (cursorDescription, triggerCallback) {\n    var key = {\n      collection: cursorDescription.collectionName\n    };\n\n    var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);\n\n    if (specificIds) {\n      _.each(specificIds, function (id) {\n        triggerCallback(_.extend({\n          id: id\n        }, key));\n      });\n\n      triggerCallback(_.extend({\n        dropCollection: true,\n        id: null\n      }, key));\n    } else {\n      triggerCallback(key);\n    } // Everyone cares about the database being dropped.\n\n\n    triggerCallback({\n      dropDatabase: true\n    });\n  }; // observeChanges for tailable cursors on capped collections.\n  //\n  // Some differences from normal cursors:\n  //   - Will never produce anything other than 'added' or 'addedBefore'. If you\n  //     do update a document that has already been produced, this will not notice\n  //     it.\n  //   - If you disconnect and reconnect from Mongo, it will essentially restart\n  //     the query, which will lead to duplicate results. This is pretty bad,\n  //     but if you include a field called 'ts' which is inserted as\n  //     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n  //     current Mongo-style timestamp), we'll be able to find the place to\n  //     restart properly. (This field is specifically understood by Mongo with an\n  //     optimization which allows it to find the right place to start without\n  //     an index on ts. It's how the oplog works.)\n  //   - No callbacks are triggered synchronously with the call (there's no\n  //     differentiation between \"initial data\" and \"later changes\"; everything\n  //     that matches the query gets sent asynchronously).\n  //   - De-duplication is not implemented.\n  //   - Does not yet interact with the write fence. Probably, this should work by\n  //     ignoring removes (which don't work on capped collections) and updates\n  //     (which don't affect tailable cursors), and just keeping track of the ID\n  //     of the inserted object, and closing the write fence once you get to that\n  //     ID (or timestamp?).  This doesn't work well if the document doesn't match\n  //     the query, though.  On the other hand, the write fence can close\n  //     immediately if it does not match the query. So if we trust minimongo\n  //     enough to accurately evaluate the query against the write fence, we\n  //     should be able to do this...  Of course, minimongo doesn't even support\n  //     Mongo Timestamps yet.\n\n\n  MongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {\n    var self = this; // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n    // error if you didn't provide them.\n\n    if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {\n      throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n    }\n\n    return self.tail(cursorDescription, function (doc) {\n      var id = doc._id;\n      delete doc._id; // The ts is an implementation detail. Hide it.\n\n      delete doc.ts;\n\n      if (ordered) {\n        callbacks.addedBefore(id, doc, null);\n      } else {\n        callbacks.added(id, doc);\n      }\n    });\n  }; // XXX We probably need to find a better way to expose this. Right now\n  // it's only used by tests, but in fact you need it in normal\n  // operation to interact with capped collections.\n\n\n  MongoInternals.MongoTimestamp = MongoDB.Timestamp;\n  MongoInternals.Connection = MongoConnection;\n}.call(this, module);","map":{"version":3,"sources":["packages/mongo/mongo_driver.js"],"names":["_objectSpread","module1","link","default","v","normalizeProjection","DocFetcher","ASYNC_CURSOR_METHODS","getAsyncMethodName","path","require","util","MongoDB","NpmModuleMongodb","Future","Npm","MongoInternals","NpmModules","mongodb","version","NpmModuleMongodbVersion","module","NpmModule","FILE_ASSET_SUFFIX","ASSETS_FOLDER","APP_FOLDER","replaceNames","filter","thing","_","isArray","map","bind","ret","each","value","key","Timestamp","prototype","clone","makeMongoLegal","name","unmakeMongoLegal","substr","replaceMongoAtomWithMeteor","document","Binary","sub_type","buffer","Uint8Array","ObjectID","Mongo","toHexString","Decimal128","Decimal","toString","size","EJSON","fromJSONValue","undefined","replaceMeteorAtomWithMongo","isBinary","Buffer","from","fromString","_isCustomType","toJSONValue","replaceTypes","atomTransformer","replacedTopLevelAtom","val","valReplaced","MongoConnection","url","options","self","_observeMultiplexers","_onFailoverHook","Hook","userOptions","_connectionOptions","Meteor","settings","packages","mongo","mongoOptions","Object","assign","ignoreUndefined","has","maxPoolSize","entries","endsWith","forEach","optionName","replace","join","Assets","getServerDir","db","_oplogHandle","_docFetcher","client","MongoClient","on","bindEnvironment","event","previousDescription","type","newDescription","callback","oplogUrl","Package","OplogHandle","databaseName","close","Error","oplogHandle","stop","wrap","wait","rawCollection","collectionName","collection","_createCappedCollection","byteSize","maxDocuments","future","createCollection","capped","max","resolver","_maybeBeginWrite","fence","DDPServer","_CurrentWriteFence","get","beginWrite","committed","_onFailover","register","writeCallback","write","refresh","err","result","refreshErr","bindEnvironmentForWrite","_insert","collection_name","sendError","e","_expectedByTest","LocalCollection","_isPlainObject","id","_id","insertOne","safe","then","insertedId","catch","_refresh","selector","refreshKey","specificIds","_idsMatchedBySelector","extend","_remove","deleteMany","deletedCount","transformResult","modifiedCount","numberAffected","_dropCollection","cb","dropCollection","drop","_dropDatabase","dropDatabase","_update","mod","Function","mongoOpts","arrayFilters","upsert","multi","fullResult","mongoSelector","mongoMod","isModify","_isModificationMod","_forbidReplace","knownId","newDoc","_createUpsertDocument","generatedId","simulateUpsertWithInsertedId","error","_returnObject","hasOwnProperty","$setOnInsert","strings","keys","startsWith","updateMethod","length","meteorResult","driverResult","mongoResult","upsertedCount","upsertedId","n","matchedCount","NUM_OPTIMISTIC_TRIES","_isCannotChangeIdError","errmsg","indexOf","mongoOptsForUpdate","mongoOptsForInsert","replacementWithId","tries","doUpdate","method","updateMany","some","replaceOne","doConditionalInsert","wrapAsync","apply","arguments","update","find","Cursor","CursorDescription","findOne","limit","fetch","createIndex","index","indexName","_ensureIndex","_dropIndex","dropIndex","Collection","_rewriteSelector","cursorDescription","_mongo","_cursorDescription","_synchronousCursor","setupSynchronousCursor","cursor","tailable","_createSynchronousCursor","selfForIteration","useTransform","Symbol","iterator","asyncIterator","methodName","methodNameAsync","Promise","resolve","getTransform","transform","_publishCursor","sub","_getCollectionName","observe","callbacks","_observeFromObserveChanges","observeChanges","methods","ordered","_observeChangesCallbacksAreOrdered","exceptionName","_fromObserve","_observeChanges","nonMutatingCallbacks","pick","cursorOptions","sort","skip","projection","fields","readPreference","numberOfRetries","dbCursor","addCursorFlag","OPLOG_COLLECTION","ts","maxTimeMs","maxTimeMS","hint","SynchronousCursor","_dbCursor","_selfForIteration","_transform","wrapTransform","_synchronousCount","countDocuments","_visitedIds","_IdMap","_rawNextObjectPromise","reject","next","doc","_nextObjectPromise","set","_nextObjectPromiseWithTimeout","timeoutMS","nextObjectPromise","timeoutErr","timeoutPromise","timer","setTimeout","race","_nextObject","await","thisArg","_rewind","call","res","push","rewind","identity","count","getRawObjects","results","done","syncResult","tail","docCallback","stopped","lastTS","loop","newSelector","$gt","defer","_observeChangesTailable","fieldsOptions","observeKey","stringify","multiplexer","observeDriver","firstHandle","_noYieldsAllowed","ObserveMultiplexer","onStop","observeHandle","ObserveHandle","matcher","sorter","canUseOplog","all","_testOnlyPollCallback","Minimongo","Matcher","OplogObserveDriver","cursorSupported","Sorter","f","driverClass","PollingObserveDriver","mongoHandle","_observeDriver","addHandleAndSendInitialAdds","listenAll","listenCallback","listeners","forEachTrigger","trigger","_InvalidationCrossbar","listen","listener","triggerCallback","addedBefore","added","MongoTimestamp","Connection"],"mappings":"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","sourcesContent":["import { normalizeProjection } from \"./mongo_utils\";\n\n/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nconst path = require(\"path\");\nconst util = require(\"util\");\n\n/** @type {import('mongodb')} */\nvar MongoDB = NpmModuleMongodb;\nvar Future = Npm.require('fibers/future');\nimport { DocFetcher } from \"./doc_fetcher.js\";\nimport {\n  ASYNC_CURSOR_METHODS,\n  getAsyncMethodName\n} from \"meteor/minimongo/constants\";\n\nMongoInternals = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\nconst FILE_ASSET_SUFFIX = 'Asset';\nconst ASSETS_FOLDER = 'assets';\nconst APP_FOLDER = 'app';\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\" && thing !== null) {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    // for backwards compatibility\n    if (document.sub_type !== 0) {\n      return document;\n    }\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Decimal128) {\n    return Decimal(document.toString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(Buffer.from(document));\n  }\n  if (document instanceof MongoDB.Binary) {\n     return document;\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (document instanceof Decimal) {\n    return MongoDB.Decimal128.fromString(document.toString());\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  const userOptions = {\n    ...(Mongo._connectionOptions || {}),\n    ...(Meteor.settings?.packages?.mongo?.options || {})\n  };\n\n  var mongoOptions = Object.assign({\n    ignoreUndefined: true,\n  }, userOptions);\n\n\n\n  // Internally the oplog connections specify their own maxPoolSize\n  // which we don't want to overwrite with any user defined value\n  if (_.has(options, 'maxPoolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.maxPoolSize = options.maxPoolSize;\n  }\n\n  // Transform options like \"tlsCAFileAsset\": \"filename.pem\" into\n  // \"tlsCAFile\": \"/<fullpath>/filename.pem\"\n  Object.entries(mongoOptions || {})\n    .filter(([key]) => key && key.endsWith(FILE_ASSET_SUFFIX))\n    .forEach(([key, value]) => {\n      const optionName = key.replace(FILE_ASSET_SUFFIX, '');\n      mongoOptions[optionName] = path.join(Assets.getServerDir(),\n        ASSETS_FOLDER, APP_FOLDER, value);\n      delete mongoOptions[key];\n    });\n\n  self.db = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n  self.client = new MongoDB.MongoClient(url, mongoOptions);\n  self.db = self.client.db();\n\n  self.client.on('serverDescriptionChanged', Meteor.bindEnvironment(event => {\n    // When the connection is no longer against the primary node, execute all\n    // failover hooks. This is important for the driver as it has to re-pool the\n    // query when it happens.\n    if (\n      event.previousDescription.type !== 'RSPrimary' &&\n      event.newDescription.type === 'RSPrimary'\n    ) {\n      self._onFailoverHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n  }));\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.client.close, self.client))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  return self.db.collection(collectionName);\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence) {\n    return fence.beginWrite();\n  } else {\n    return {committed: function () {}};\n  }\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback) {\n      callback(err, result);\n    } else if (err) {\n      throw err;\n    }\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insertOne(\n      replaceTypes(document, replaceMeteorAtomWithMongo),\n      {\n        safe: true,\n      }\n    ).then(({insertedId}) => {\n      callback(null, insertedId);\n    }).catch((e) => {\n      callback(e, null)\n    });\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection\n      .deleteMany(replaceTypes(selector, replaceMeteorAtomWithMongo), {\n        safe: true,\n      })\n      .then(({ deletedCount }) => {\n        callback(null, transformResult({ result : {modifiedCount : deletedCount} }).numberAffected);\n      }).catch((err) => {\n      callback(err);\n    });\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e._expectedByTest = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // Add support for filtered positional operator\n    if (options.arrayFilters !== undefined) mongoOpts.arrayFilters = options.arrayFilters;\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = LocalCollection._isModificationMod(mongoMod);\n\n    if (options._forbidReplace && !isModify) {\n      var err = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(err);\n      } else {\n        throw err;\n      }\n    }\n\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n\n    // Run this code up front so that it fails fast if someone uses\n    // a Mongo update operator we don't support.\n    let knownId;\n    if (options.upsert) {\n      try {\n        let newDoc = LocalCollection._createUpsertDocument(selector, mod);\n        knownId = newDoc._id;\n      } catch (err) {\n        if (callback) {\n          return callback(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    if (options.upsert &&\n        ! isModify &&\n        ! knownId &&\n        options.insertedId &&\n        ! (options.insertedId instanceof Mongo.ObjectID &&\n           options.generatedId)) {\n      // In case of an upsert with a replacement, where there is no _id defined\n      // in either the query or the replacement doc, mongo will generate an id itself.\n      // Therefore we need this special strategy if we want to control the id ourselves.\n\n      // We don't need to do this when:\n      // - This is not a replacement, so we can add an _id to $setOnInsert\n      // - The id is defined by query or mod we can just add it to the replacement doc\n      // - The user did not specify any id preference and the id is a Mongo ObjectId,\n      //     then we can just let Mongo generate the id\n\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (error, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject) {\n            callback(error, result.numberAffected);\n          } else {\n            callback(error, result);\n          }\n        }\n      );\n    } else {\n\n      if (options.upsert && !knownId && options.insertedId && isModify) {\n        if (!mongoMod.hasOwnProperty('$setOnInsert')) {\n          mongoMod.$setOnInsert = {};\n        }\n        knownId = options.insertedId;\n        Object.assign(mongoMod.$setOnInsert, replaceTypes({_id: options.insertedId}, replaceMeteorAtomWithMongo));\n      }\n\n      const strings = Object.keys(mongoMod).filter((key) => !key.startsWith(\"$\"));\n      let updateMethod = strings.length > 0 ? 'replaceOne' : 'updateMany';\n      updateMethod =\n        updateMethod === 'updateMany' && !mongoOpts.multi\n          ? 'updateOne'\n          : updateMethod;\n      collection[updateMethod].bind(collection)(\n        mongoSelector, mongoMod, mongoOpts,\n          // mongo driver now returns undefined for err in the callback\n          bindEnvironmentForWrite(function (err = null, result) {\n          if (! err) {\n            var meteorResult = transformResult({result});\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n              if (options.upsert && meteorResult.insertedId) {\n                if (knownId) {\n                  meteorResult.insertedId = knownId;\n                } else if (meteorResult.insertedId instanceof MongoDB.ObjectID) {\n                  meteorResult.insertedId = new Mongo.ObjectID(meteorResult.insertedId.toHexString());\n                }\n              }\n\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar transformResult = function (driverResult) {\n  var meteorResult = { numberAffected: 0 };\n  if (driverResult) {\n    var mongoResult = driverResult.result;\n    // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n    if (mongoResult.upsertedCount) {\n      meteorResult.numberAffected = mongoResult.upsertedCount;\n\n      if (mongoResult.upsertedId) {\n        meteorResult.insertedId = mongoResult.upsertedId;\n      }\n    } else {\n      // n was used before Mongo 5.0, in Mongo 5.0 we are not receiving this n\n      // field and so we are using modifiedCount instead\n      meteorResult.numberAffected = mongoResult.n || mongoResult.matchedCount || mongoResult.modifiedCount;\n    }\n  }\n\n  return meteorResult;\n};\n\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n\n  // Mongo 3.2.* returns error as next Object:\n  // {name: String, code: Number, errmsg: String}\n  // Older Mongo returns:\n  // {name: String, code: Number, err: String}\n  var error = err.errmsg || err.err;\n\n  // We don't use the error code here\n  // because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (error.indexOf('The _id field cannot be changed') === 0\n    || error.indexOf(\"the (immutable) field '_id' was found to have been altered to _id\") !== -1) {\n    return true;\n  }\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             options, callback) {\n  // STRATEGY: First try doing an upsert with a generated ID.\n  // If this throws an error about changing the ID on an existing document\n  // then without affecting the database, we know we should probably try\n  // an update without the generated ID. If it affected 0 documents,\n  // then without affecting the database, we the document that first\n  // gave the error is probably removed and we need to try an insert again\n  // We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var replacementWithId = Object.assign(\n    replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n    mod);\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      let method = collection.updateMany;\n      if(!Object.keys(mod).some(key => key.startsWith(\"$\"))){\n        method = collection.replaceOne.bind(collection);\n      }\n      method(\n        selector,\n        mod,\n        mongoOptsForUpdate,\n        bindEnvironmentForWrite(function(err, result) {\n          if (err) {\n            callback(err);\n          } else if (result && (result.modifiedCount || result.upsertedCount)) {\n            callback(null, {\n              numberAffected: result.modifiedCount || result.upsertedCount,\n              insertedId: result.upsertedId || undefined,\n            });\n          } else {\n            doConditionalInsert();\n          }\n        })\n      );\n    }\n  };\n\n  var doConditionalInsert = function() {\n    collection.replaceOne(\n      selector,\n      replacementWithId,\n      mongoOptsForInsert,\n      bindEnvironmentForWrite(function(err, result) {\n        if (err) {\n          // figure out if this is a\n          // \"cannot change _id of document\" error, and\n          // if so, try doUpdate() again, up to 3 times.\n          if (MongoConnection._isCannotChangeIdError(err)) {\n            doUpdate();\n          } else {\n            callback(err);\n          }\n        } else {\n          callback(null, {\n            numberAffected: result.upsertedCount,\n            insertedId: result.upsertedId,\n          });\n        }\n      })\n    );\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype.createIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.createIndex(index, options, future.resolver());\n  future.wait();\n};\n\nMongoConnection.prototype._ensureIndex = MongoConnection.prototype.createIndex;\n\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\nfunction setupSynchronousCursor(cursor, method) {\n  // You can only observe a tailable cursor.\n  if (cursor._cursorDescription.options.tailable)\n    throw new Error('Cannot call ' + method + ' on a tailable cursor');\n\n  if (!cursor._synchronousCursor) {\n    cursor._synchronousCursor = cursor._mongo._createSynchronousCursor(\n      cursor._cursorDescription,\n      {\n        // Make sure that the \"cursor\" argument to forEach/map callbacks is the\n        // Cursor, not the SynchronousCursor.\n        selfForIteration: cursor,\n        useTransform: true,\n      }\n    );\n  }\n\n  return cursor._synchronousCursor;\n}\n\n[...ASYNC_CURSOR_METHODS, Symbol.iterator, Symbol.asyncIterator].forEach(methodName => {\n  Cursor.prototype[methodName] = function (...args) {\n    const cursor = setupSynchronousCursor(this, methodName);\n    return cursor[methodName](...args);\n  };\n\n  // These methods are handled separately.\n  if (methodName === Symbol.iterator || methodName === Symbol.asyncIterator) {\n    return;\n  }\n\n  const methodNameAsync = getAsyncMethodName(methodName);\n  Cursor.prototype[methodNameAsync] = function (...args) {\n    return Promise.resolve(this[methodName](...args));\n  };\n});\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n};\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks, options = {}) {\n  var self = this;\n  var methods = [\n    'addedAt',\n    'added',\n    'changedAt',\n    'changed',\n    'removedAt',\n    'removed',\n    'movedTo'\n  ];\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n\n  let exceptionName = callbacks._fromObserve ? 'observe' : 'observeChanges';\n  exceptionName += ' callback';\n  methods.forEach(function (method) {\n    if (callbacks[method] && typeof callbacks[method] == \"function\") {\n      callbacks[method] = Meteor.bindEnvironment(callbacks[method], method + exceptionName);\n    }\n  });\n\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks, options.nonMutatingCallbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip,\n    projection: cursorOptions.fields || cursorOptions.projection,\n    readPreference: cursorOptions.readPreference,\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    mongoOptions.numberOfRetries = -1;\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    mongoOptions);\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    dbCursor.addCursorFlag(\"tailable\", true)\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    dbCursor.addCursorFlag(\"awaitData\", true)\n\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      dbCursor.addCursorFlag(\"oplogReplay\", true)\n    }\n  }\n\n  if (typeof cursorOptions.maxTimeMs !== 'undefined') {\n    dbCursor = dbCursor.maxTimeMS(cursorOptions.maxTimeMs);\n  }\n  if (typeof cursorOptions.hint !== 'undefined') {\n    dbCursor = dbCursor.hint(cursorOptions.hint);\n  }\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options, collection);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options, collection) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  self._synchronousCount = Future.wrap(\n    collection.countDocuments.bind(\n      collection,\n      replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n      replaceTypes(cursorDescription.options, replaceMeteorAtomWithMongo),\n    )\n  );\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  // Returns a Promise for the next object from the underlying cursor (before\n  // the Mongo->Meteor type replacement).\n  _rawNextObjectPromise: function () {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self._dbCursor.next((err, doc) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(doc);\n        }\n      });\n    });\n  },\n\n  // Returns a Promise for the next object from the cursor, skipping those whose\n  // IDs we've already seen and replacing Mongo atoms with Meteor atoms.\n  _nextObjectPromise: async function () {\n    var self = this;\n\n    while (true) {\n      var doc = await self._rawNextObjectPromise();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  // Returns a promise which is resolved with the next object (like with\n  // _nextObjectPromise) or rejected if the cursor doesn't return within\n  // timeoutMS ms.\n  _nextObjectPromiseWithTimeout: function (timeoutMS) {\n    const self = this;\n    if (!timeoutMS) {\n      return self._nextObjectPromise();\n    }\n    const nextObjectPromise = self._nextObjectPromise();\n    const timeoutErr = new Error('Client-side timeout waiting for next object');\n    const timeoutPromise = new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        reject(timeoutErr);\n      }, timeoutMS);\n    });\n    return Promise.race([nextObjectPromise, timeoutPromise])\n      .catch((err) => {\n        if (err === timeoutErr) {\n          self.close();\n        }\n        throw err;\n      });\n  },\n\n  _nextObject: function () {\n    var self = this;\n    return self._nextObjectPromise().await();\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function () {\n    var self = this;\n    return self._synchronousCount().wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nSynchronousCursor.prototype[Symbol.iterator] = function () {\n  var self = this;\n\n  // Get back to the beginning.\n  self._rewind();\n\n  return {\n    next() {\n      const doc = self._nextObject();\n      return doc ? {\n        value: doc\n      } : {\n        done: true\n      };\n    }\n  };\n};\n\nSynchronousCursor.prototype[Symbol.asyncIterator] = function () {\n  const syncResult = this[Symbol.iterator]();\n  return {\n    async next() {\n      return Promise.resolve(syncResult.next());\n    }\n  };\n}\n\n// Tails the cursor described by cursorDescription, most likely on the\n// oplog. Calls docCallback with each document found. Ignores errors and just\n// restarts the tail on error.\n//\n// If timeoutMS is set, then if we don't get a new document every timeoutMS,\n// kill and restart the cursor. This is primarily a workaround for #8598.\nMongoConnection.prototype.tail = function (cursorDescription, docCallback, timeoutMS) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS;\n  var loop = function () {\n    var doc = null;\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        doc = cursor._nextObjectPromiseWithTimeout(timeoutMS).await();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error from\n        // Mongo, or just client-side (including our own timeout error). Ah\n        // well. But either way, we need to retry the cursor (unless the failure\n        // was because the observe got stopped).\n        doc = null;\n      }\n      // Since we awaited a promise above, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks, nonMutatingCallbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  const fieldsOptions = cursorDescription.options.projection || cursorDescription.options.fields;\n  if (fieldsOptions &&\n      (fieldsOptions._id === 0 ||\n       fieldsOptions._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = EJSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer,\n    callbacks,\n    nonMutatingCallbacks,\n  );\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n"]},"sourceType":"module","externalDependencies":{},"hash":"55acbe0ffd6c9465ab382e2306766d7711cfe8b4"}
