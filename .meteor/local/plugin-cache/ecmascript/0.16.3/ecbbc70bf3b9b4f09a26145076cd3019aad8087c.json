{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/ui/components/PatientForm.jsx","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","inputSourceMap":{"version":3,"sources":["imports/ui/components/PatientForm.jsx"],"names":["React","useState","PatientCollection","useForm","PatientForm","name","setName","FirstLastName","setFirstLastName","SecondLastName","setSecondLastName","Rut","setRut","zipCode","setZipCode","state","setState","county","setCounty","register","handleSubmit","formState","errors","submit","e","preventDefault","insert","required","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\nimport { useForm } from \"react-hook-form\";\n\n const PatientForm = () => {\n \n //SetState and Const for parameters\n  const [name, setName] = useState(\"\");\n  const [FirstLastName,setFirstLastName ] = useState(\"\");\n  const [SecondLastName,setSecondLastName ] = useState(\"\");\n  const [Rut,setRut ] = useState(\"\");\n  const [zipCode,setZipCode ] = useState(\"\");\n  const [state,setState ] = useState(\"\");\n  const [county,setCounty ] = useState(\"\");\n\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const  submit =  (e) => {\n     \n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n     name, FirstLastName, SecondLastName, Rut, zipCode, state, county,\n    });\n\n    setName(\"\");\n    setFirstLastName(\"\")\n    setSecondLastName(\"\")\n    setRut(\"\")\n    setZipCode(\"\")\n    setState(\"\")\n    setCounty(\"\")\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit(submit)}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        {...register('name', {required: true})}\n        onChange={(e) => setName(e.target.value)}\n      />\n      {errors.name && <p>Name Is Required</p>}\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={FirstLastName}\n        required={true}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={SecondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={Rut}\n        required={true}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        required={true}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        required={true}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder=\"Select Your County\"\n        value={county}\n        required={true}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <input type=\"submit\" value=\"Registrar\"/>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n"]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/components/PatientForm.jsx"}},"code":"!function (module1) {\n  var _extends;\n\n  module1.link(\"@babel/runtime/helpers/extends\", {\n    default: function (v) {\n      _extends = v;\n    }\n  }, 0);\n\n  var _slicedToArray;\n\n  module1.link(\"@babel/runtime/helpers/slicedToArray\", {\n    default: function (v) {\n      _slicedToArray = v;\n    }\n  }, 1);\n  var React, useState;\n  module1.link(\"react\", {\n    \"default\": function (v) {\n      React = v;\n    },\n    useState: function (v) {\n      useState = v;\n    }\n  }, 0);\n  var PatientCollection;\n  module1.link(\"../../api/Collections/PatientCollection\", {\n    PatientCollection: function (v) {\n      PatientCollection = v;\n    }\n  }, 1);\n  var useForm;\n  module1.link(\"react-hook-form\", {\n    useForm: function (v) {\n      useForm = v;\n    }\n  }, 2);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  var PatientForm = function () {\n    _s(); //SetState and Const for parameters\n\n\n    var _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n    var _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        FirstLastName = _useState4[0],\n        setFirstLastName = _useState4[1];\n\n    var _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        SecondLastName = _useState6[0],\n        setSecondLastName = _useState6[1];\n\n    var _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        Rut = _useState8[0],\n        setRut = _useState8[1];\n\n    var _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        zipCode = _useState10[0],\n        setZipCode = _useState10[1];\n\n    var _useState11 = useState(\"\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        state = _useState12[0],\n        setState = _useState12[1];\n\n    var _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        county = _useState14[0],\n        setCounty = _useState14[1];\n\n    var _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.formState.errors;\n\n    var submit = function (e) {\n      e.preventDefault();\n      if (!name) return;\n      PatientCollection.insert({\n        name: name,\n        FirstLastName: FirstLastName,\n        SecondLastName: SecondLastName,\n        Rut: Rut,\n        zipCode: zipCode,\n        state: state,\n        county: county\n      });\n      setName(\"\");\n      setFirstLastName(\"\");\n      setSecondLastName(\"\");\n      setRut(\"\");\n      setZipCode(\"\");\n      setState(\"\");\n      setCounty(\"\");\n    };\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"task-form\",\n      onSubmit: handleSubmit(submit)\n    }, /*#__PURE__*/React.createElement(\"input\", _extends({\n      type: \"text\",\n      placeholder: \"Type to Name\",\n      value: name\n    }, register('name', {\n      required: true\n    }), {\n      onChange: function (e) {\n        return setName(e.target.value);\n      }\n    })), errors.name && /*#__PURE__*/React.createElement(\"p\", null, \"Name Is Required\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type firstLastName\",\n      value: FirstLastName,\n      required: true,\n      onChange: function (e) {\n        return setFirstLastName(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type Second Last Name\",\n      value: SecondLastName,\n      onChange: function (e) {\n        return setSecondLastName(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to rut\",\n      value: Rut,\n      required: true,\n      onChange: function (e) {\n        return setRut(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to zip code\",\n      value: zipCode,\n      required: true,\n      onChange: function (e) {\n        return setZipCode(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Select Your State\",\n      value: state,\n      required: true,\n      onChange: function (e) {\n        return setState(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placerholder: \"Select Your County\",\n      value: county,\n      required: true,\n      onChange: function (e) {\n        return setCounty(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Registrar\"\n    }));\n  };\n\n  _s(PatientForm, \"EkJhh2U/X4Rw/z0OTPtfP16NwwQ=\", false, function () {\n    return [useForm];\n  });\n\n  _c = PatientForm;\n  module1.exportDefault(PatientForm);\n\n  var _c;\n\n  $RefreshReg$(_c, \"PatientForm\");\n}.call(this, module);","map":{"version":3,"mappings":"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","names":["PatientForm","_s","useState","name","setName","FirstLastName","setFirstLastName","SecondLastName","setSecondLastName","Rut","setRut","zipCode","setZipCode","state","setState","county","setCounty","useForm","register","handleSubmit","errors","formState","submit","e","preventDefault","PatientCollection","insert","required","target","value"],"sources":["imports/ui/components/PatientForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\nimport { useForm } from \"react-hook-form\";\n\n const PatientForm = () => {\n \n //SetState and Const for parameters\n  const [name, setName] = useState(\"\");\n  const [FirstLastName,setFirstLastName ] = useState(\"\");\n  const [SecondLastName,setSecondLastName ] = useState(\"\");\n  const [Rut,setRut ] = useState(\"\");\n  const [zipCode,setZipCode ] = useState(\"\");\n  const [state,setState ] = useState(\"\");\n  const [county,setCounty ] = useState(\"\");\n\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const  submit =  (e) => {\n     \n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n     name, FirstLastName, SecondLastName, Rut, zipCode, state, county,\n    });\n\n    setName(\"\");\n    setFirstLastName(\"\")\n    setSecondLastName(\"\")\n    setRut(\"\")\n    setZipCode(\"\")\n    setState(\"\")\n    setCounty(\"\")\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit(submit)}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        {...register('name', {required: true})}\n        onChange={(e) => setName(e.target.value)}\n      />\n      {errors.name && <p>Name Is Required</p>}\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={FirstLastName}\n        required={true}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={SecondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={Rut}\n        required={true}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        required={true}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        required={true}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder=\"Select Your County\"\n        value={county}\n        required={true}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <input type=\"submit\" value=\"Registrar\"/>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n"]},"sourceType":"module","externalDependencies":{},"hash":"ecbbc70bf3b9b4f09a26145076cd3019aad8087c"}
