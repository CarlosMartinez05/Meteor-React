{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/ui/components/PatientForm.jsx","filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","inputSourceMap":{"version":3,"sources":["imports/ui/components/PatientForm.jsx"],"names":["React","useState","PatientCollection","PatientForm","name","FirstLastName","setFirstLastName","SecondLastName","Rut","zipCode","state","county","setName","setSecondLastName","setRut","setZipCode","setState","setCounty","handleSubmit","e","preventDefault","insert","setText","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\n const PatientForm = () => {\n  const [name,FirstLastName,setFirstLastName,SecondLastName, Rut, zipCode,state, county,setName, setSecondLastName, setRut, setZipCode, setState, setCounty] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n     name, FirstLastName, SecondLastName, Rut, zipCode, state, county\n    });\n\n    setText(\"\");\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={FirstLastName}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={SecondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={Rut}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder=\"Select Your County\"\n        value={county}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <button type=\"submit\" value={handleSubmit}>Add Task</button>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n\n/* import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\nexport const PatientForm = () => {\n    const [name, setNameState] = useState(\"\");\n\n\n    const submit = (data, formRef) => {\n        let insertError;\n        const {\n            name,\n        } = data;\n        StudentData.insert(\n            {\n                name,\n            },\n            (error) => { insertError = error; },\n        );\n        if (insertError) {\n            console.log(insertError)\n        } else {\n            console.log(\"Create Patient\")\n            setNameState(name);\n            formRef.reset();\n        }\n    };\n\nreturn (\n    <div>\n        <form className=\"task-form\">\n            <input\n                type=\"name\"\n                placeholder=\"Type your name\"\n            />\n\n            <button type=\"submit\" value={submit}>Add Task</button>\n        </form>\n    </div>\n);\n};\n */"]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/home/carlos/Prueba-docmovi/FormDocMovi","root":"/home/carlos/Prueba-docmovi/FormDocMovi","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/home/carlos/Prueba-docmovi/FormDocMovi/imports/ui/components/PatientForm.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/components/PatientForm.jsx"}},"code":"!function (module1) {\n  var _slicedToArray;\n\n  module1.link(\"@babel/runtime/helpers/slicedToArray\", {\n    default: function (v) {\n      _slicedToArray = v;\n    }\n  }, 0);\n  var React, useState;\n  module1.link(\"react\", {\n    \"default\": function (v) {\n      React = v;\n    },\n    useState: function (v) {\n      useState = v;\n    }\n  }, 0);\n  var PatientCollection;\n  module1.link(\"../../api/Collections/PatientCollection\", {\n    PatientCollection: function (v) {\n      PatientCollection = v;\n    }\n  }, 1);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  var PatientForm = function () {\n    _s();\n\n    var _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 14),\n        name = _useState2[0],\n        FirstLastName = _useState2[1],\n        setFirstLastName = _useState2[2],\n        SecondLastName = _useState2[3],\n        Rut = _useState2[4],\n        zipCode = _useState2[5],\n        state = _useState2[6],\n        county = _useState2[7],\n        setName = _useState2[8],\n        setSecondLastName = _useState2[9],\n        setRut = _useState2[10],\n        setZipCode = _useState2[11],\n        setState = _useState2[12],\n        setCounty = _useState2[13];\n\n    var handleSubmit = function (e) {\n      e.preventDefault();\n      if (!name) return;\n      PatientCollection.insert({\n        name: name,\n        FirstLastName: FirstLastName,\n        SecondLastName: SecondLastName,\n        Rut: Rut,\n        zipCode: zipCode,\n        state: state,\n        county: county\n      });\n      setText(\"\");\n    };\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"task-form\",\n      onSubmit: handleSubmit\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to Name\",\n      value: name,\n      onChange: function (e) {\n        return setName(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type firstLastName\",\n      value: FirstLastName,\n      onChange: function (e) {\n        return setFirstLastName(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type Second Last Name\",\n      value: SecondLastName,\n      onChange: function (e) {\n        return setSecondLastName(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to rut\",\n      value: Rut,\n      onChange: function (e) {\n        return setRut(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Type to zip code\",\n      value: zipCode,\n      onChange: function (e) {\n        return setZipCode(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Select Your State\",\n      value: state,\n      onChange: function (e) {\n        return setState(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placerholder: \"Select Your County\",\n      value: county,\n      onChange: function (e) {\n        return setCounty(e.target.value);\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      value: handleSubmit\n    }, \"Add Task\"));\n  };\n\n  _s(PatientForm, \"Kw8gxFnzRbJEOLm0EeBIDiDM9J8=\");\n\n  _c = PatientForm;\n  module1.exportDefault(PatientForm);\n\n  /* import React, { useState } from 'react';\n  import { PatientCollection } from '../../api/Collections/PatientCollection';\n  \n  \n  export const PatientForm = () => {\n      const [name, setNameState] = useState(\"\");\n  \n  \n      const submit = (data, formRef) => {\n          let insertError;\n          const {\n              name,\n          } = data;\n          StudentData.insert(\n              {\n                  name,\n              },\n              (error) => { insertError = error; },\n          );\n          if (insertError) {\n              console.log(insertError)\n          } else {\n              console.log(\"Create Patient\")\n              setNameState(name);\n              formRef.reset();\n          }\n      };\n  \n  return (\n      <div>\n          <form className=\"task-form\">\n              <input\n                  type=\"name\"\n                  placeholder=\"Type your name\"\n              />\n  \n              <button type=\"submit\" value={submit}>Add Task</button>\n          </form>\n      </div>\n  );\n  };\n   */\n  var _c;\n\n  $RefreshReg$(_c, \"PatientForm\");\n}.call(this, module);","map":{"version":3,"mappings":"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","names":["PatientForm","_s","useState","name","FirstLastName","setFirstLastName","SecondLastName","Rut","zipCode","state","county","setName","setSecondLastName","setRut","setZipCode","setState","setCounty","handleSubmit","e","preventDefault","PatientCollection","insert","setText","target","value"],"sources":["imports/ui/components/PatientForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\n const PatientForm = () => {\n  const [name,FirstLastName,setFirstLastName,SecondLastName, Rut, zipCode,state, county,setName, setSecondLastName, setRut, setZipCode, setState, setCounty] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!name) return;\n\n    PatientCollection.insert({\n     name, FirstLastName, SecondLastName, Rut, zipCode, state, county\n    });\n\n    setText(\"\");\n  };\n \n  return (\n    <form className=\"task-form\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type to Name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Type firstLastName\"\n        value={FirstLastName}\n        onChange={(e) => setFirstLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type Second Last Name\"\n        value={SecondLastName}\n        onChange={(e) => setSecondLastName(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to rut\"\n        value={Rut}\n        onChange={(e) => setRut(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Type to zip code\"\n        value={zipCode}\n        onChange={(e) => setZipCode(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placeholder=\"Select Your State\"\n        value={state}\n        onChange={(e) => setState(e.target.value)}\n      />\n       <input\n        type=\"text\"\n        placerholder=\"Select Your County\"\n        value={county}\n        onChange={(e) => setCounty(e.target.value)}\n      />\n\n      <button type=\"submit\" value={handleSubmit}>Add Task</button>\n    </form>\n  );\n};\n\nexport default PatientForm;\n\n\n/* import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\n\n\nexport const PatientForm = () => {\n    const [name, setNameState] = useState(\"\");\n\n\n    const submit = (data, formRef) => {\n        let insertError;\n        const {\n            name,\n        } = data;\n        StudentData.insert(\n            {\n                name,\n            },\n            (error) => { insertError = error; },\n        );\n        if (insertError) {\n            console.log(insertError)\n        } else {\n            console.log(\"Create Patient\")\n            setNameState(name);\n            formRef.reset();\n        }\n    };\n\nreturn (\n    <div>\n        <form className=\"task-form\">\n            <input\n                type=\"name\"\n                placeholder=\"Type your name\"\n            />\n\n            <button type=\"submit\" value={submit}>Add Task</button>\n        </form>\n    </div>\n);\n};\n */"]},"sourceType":"module","externalDependencies":{},"hash":"a54bc81ecb91566bd33ecd9339b5c9e4fcb2ad68"}
