{"version":3,"sources":["meteor://ðŸ’»app/imports/api/Collections/PatientCollection.js","meteor://ðŸ’»app/imports/ui/components/Footer.jsx","meteor://ðŸ’»app/imports/ui/components/NavBar.jsx","meteor://ðŸ’»app/imports/ui/components/Patient.jsx","meteor://ðŸ’»app/imports/ui/components/PatientForm.jsx","meteor://ðŸ’»app/imports/ui/App.jsx","meteor://ðŸ’»app/client/main.jsx"],"names":["PatientCollection","Mongo","Collection","Footer","NavBar","Patient","patient","onDeleteClick","name","FirstLastName","SecondLastName","Rut","zipCode","state","county","PatientForm","_s","useState","setName","setFirstLastName","setSecondLastName","setRut","setZipCode","setState","setCounty","useForm","register","handleSubmit","errors","formState","submit","data","preventDefault","insert","required","e","target","value","deletePatient","_id","remove","App","patients","useTracker","find","sort","createdAt","fetch","map","Meteor","startup","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEO,MAAMA,iBAAiB,GAAG,IAAIC,KAAK,CAACC,UAAV,CAAqB,WAArB,CAA1B;;;;;;;;;;;;;;;;;;;;;;ACAN,MAAMC,MAAM,GAAG,YAAM;AAElB,wBACI;AAAK,iBAAU;AAAf,oBACI,iDADJ,CADJ;AAFH;;OAAMA;wBASQA;;;;;;;;;;;;;;;;;;;;;;;;;;ACTf,MAAMC,MAAM,GAAG,YAAM;AAEjB,wBACI;AAAK,iBAAU;AAAf,oBACI,oDADJ,CADJ;AAFJ;;OAAMA;wBAQSA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNf,MAAMC,OAAO,GAAG,gBAA8B;AAAA,QAA5BC,OAA4B,QAA5BA,OAA4B;AAAA,QAAnBC,aAAmB,QAAnBA,aAAmB;AAC5C,wBACE,8CACE,6CACE,oDADF,eAEE,sCAFF,eAGE,0CAHF,eAIE,yCAJF,eAKE,wCALF,CADF,eAQI,6CACA,gCAAKD,OAAO,CAACE,IAAb,OAAoBF,OAAO,CAACG,aAA5B,OAA4CH,OAAO,CAACI,cAApD,CADA,eAEA,gCAAKJ,OAAO,CAACK,GAAb,CAFA,eAGA,gCAAKL,OAAO,CAACM,OAAb,CAHA,eAIA,gCAAKN,OAAO,CAACO,KAAb,CAJA,eAKA,gCAAKP,OAAO,CAACQ,MAAb,CALA,eAMA;AAAQ,eAAS;AAAA,eAAMP,aAAa,CAACD,OAAD,CAAnB;AAAA,OAAjB;AAA8C,aAAM;AAApD,kBANA,CARJ,CADF;AADF;;OAAMD;wBAsBaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBnB,MAAMU,WAAW,GAAG,YAAM;AAAAC,UAExB;;;AACA,oBAAwBC,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,QAAOT,IAAP;AAAA,QAAaU,OAAb;;AACA,qBAA0CD,QAAQ,CAAC,EAAD,CAAlD;AAAA;AAAA,QAAOR,aAAP;AAAA,QAAsBU,gBAAtB;;AACA,qBAA4CF,QAAQ,CAAC,EAAD,CAApD;AAAA;AAAA,QAAOP,cAAP;AAAA,QAAuBU,iBAAvB;;AACA,qBAAsBH,QAAQ,CAAC,EAAD,CAA9B;AAAA;AAAA,QAAON,GAAP;AAAA,QAAYU,MAAZ;;AACA,qBAA8BJ,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,QAAOL,OAAP;AAAA,QAAgBU,UAAhB;;AACA,sBAA0BL,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,QAAOJ,KAAP;AAAA,QAAcU,QAAd;;AACA,sBAA4BN,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,QAAOH,MAAP;AAAA,QAAeU,SAAf;;AAGA,mBAIIC,OAAO,EAJX;AAAA,QACEC,QADF,YACEA,QADF;AAAA,QAEEC,YAFF,YAEEA,YAFF;AAAA,QAGeC,MAHf,YAGEC,SAHF,CAGeD,MAHf;;AAMA,QAAME,MAAM;AAAG,uBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAEPA,IAAI,CAACC,cAFE;;AAAA;AAAA,sBAIRrB,GAJQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAMbX,mCAAiB,CAACiC,MAAlBjC,CAAyB;AACvBQ,wBADuB,EACvBA,IADuB;AACjBC,iCADiB,EACjBA,aADiB;AACFC,kCADE,EACFA,cADE;AACcC,uBADd,EACcA,GADd;AACmBC,2BADnB,EACmBA,OADnB;AAC4BC,yBAD5B,EAC4BA,KAD5B;AACmCC;AADnC,mBAAzBd;AAIAkB,yBAAO,CAAC,EAAD,CAAPA;AACAC,kCAAgB,CAAC,EAAD,CAAhBA;AACAC,mCAAiB,CAAC,EAAD,CAAjBA;AACAC,wBAAM,CAAC,EAAD,CAANA;AACAC,4BAAU,CAAC,EAAD,CAAVA;AACAC,0BAAQ,CAAC,EAAD,CAARA;AACAC,2BAAS,CAAC,EAAD,CAATA;;AAhBa;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAH;AAAA,OAAZ;;AAmBA,wBACE,8CACE;AAAM,gBAAUG,YAAY,CAACG,MAAD;AAA5B,oBACE;AAAO,eAAQ;AAAf,qBADF,eAEE;AACE,oBAAa,MADf;AAEE,YAAK,MAFP;AAGE,mBAAY,QAHd;AAIE,aAAOtB;AAJT,OAKMkB,QAAQ,CAAC,MAAD,EAAS;AAAEQ,cAAQ,EAAE;AAAZ,KAAT,CALd;AAME,gBAAWC,WAAD;AAAA,eAAOjB,OAAO,CAACiB,CAAC,CAACC,MAAFD,CAASE,KAAV,CAAd;AAAA;AANZ,OAFF,EAUGT,MAAM,CAACpB,IAAPoB,iBAAe,uDAVlB,eAWE;AAAO,eAAQ;AAAf,2BAXF,eAYE;AACE,YAAK,MADP;AAEE,mBAAY,kBAFd;AAGE,aAAOnB;AAHT,OAIMiB,QAAQ,CAAC,eAAD,EAAkB;AAAEQ,cAAQ,EAAE;AAAZ,KAAlB,CAJd;AAKE,gBAAWC,WAAD;AAAA,eAAOhB,gBAAgB,CAACgB,CAAC,CAACC,MAAFD,CAASE,KAAV,CAAvB;AAAA;AALZ,OAZF,EAmBGT,MAAM,CAACnB,aAAPmB,iBAAwB,+DAnB3B,eAoBE;AAAO,eAAQ;AAAf,2BApBF,eAqBE;AACE,YAAK,MADP;AAEE,mBAAY,kBAFd;AAGE,aAAOlB,cAHT;AAIE,gBAAWyB,WAAD;AAAA,eAAOf,iBAAiB,CAACe,CAAC,CAACC,MAAFD,CAASE,KAAV,CAAxB;AAAA;AAJZ,MArBF,eA2BE;AAAO,eAAQ;AAAf,cA3BF,eA4BE;AACE,YAAK,MADP;AAEE,mBAAY,KAFd;AAGE,aAAO1B;AAHT,OAIMe,QAAQ,CAAC,KAAD,EAAQ;AAAEQ,cAAQ,EAAE;AAAZ,KAAR,CAJd;AAKE,gBAAWC,WAAD;AAAA,eAAOd,MAAM,CAACc,CAAC,CAACC,MAAFD,CAASE,KAAV,CAAb;AAAA;AALZ,OA5BF,EAmCGT,MAAM,CAACjB,GAAPiB,iBAAc,oDAnCjB,eAoCE;AAAO,eAAQ;AAAf,wBApCF,eAqCE;AACE,YAAK,MADP;AAEE,mBAAY,eAFd;AAGE,aAAOhB;AAHT,OAIMc,QAAQ,CAAC,SAAD,EAAY;AAAEQ,cAAQ,EAAE;AAAZ,KAAZ,CAJd;AAKE,gBAAWC,WAAD;AAAA,eAAOb,UAAU,CAACa,CAAC,CAACC,MAAFD,CAASE,KAAV,CAAjB;AAAA;AALZ,OArCF,EA4CGT,MAAM,CAAChB,OAAPgB,iBAAkB,8DA5CrB,eA6CE;AAAO,eAAQ;AAAf,iBA7CF,eA8CE;AACE,YAAK,MADP;AAEE,mBAAY,QAFd;AAGE,aAAOf;AAHT,OAIMa,QAAQ,CAAC,OAAD,EAAU;AAAEQ,cAAQ,EAAE;AAAZ,KAAV,CAJd;AAKE,gBAAWC,WAAD;AAAA,eAAOZ,QAAQ,CAACY,CAAC,CAACC,MAAFD,CAASE,KAAV,CAAf;AAAA;AALZ,OA9CF,EAqDGT,MAAM,CAACf,KAAPe,iBAAgB,wDArDnB,eAsDE;AAAO,eAAQ;AAAf,gBAtDF,eAuDE;AACE,YAAK,MADP;AAEE,oBAAa,QAFf;AAGE,aAAOd;AAHT,OAIMY,QAAQ,CAAC,QAAD,EAAW;AAAEQ,cAAQ,EAAE;AAAZ,KAAX,CAJd;AAKE,gBAAWC,WAAD;AAAA,eAAOX,SAAS,CAACW,CAAC,CAACC,MAAFD,CAASE,KAAV,CAAhB;AAAA;AALZ,OAvDF,EA8DGT,MAAM,CAACd,MAAPc,iBAAiB,wDA9DpB,eA+DE;AAAQ,YAAK;AAAb,gBA/DF,CADF,CADF;AArCF;;KAAMb,a;YAgBAU;;;OAhBAV;wBA4GSA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGf,MAAMuB,aAAa,GAAG;AAAA,QAAEC,GAAF,QAAEA,GAAF;AAAA,WAAWvC,iBAAiB,CAACwC,MAAlBxC,CAAyBuC,GAAzBvC,CAAX;AAAA,GAAtB;;AAEA,MAAMyC,GAAG,GAAG,YAAM;AAAAzB;;AAEhB,QAAM0B,QAAQ,GAAGC,UAAU,CAAC;AAAA,aAAM3C,iBAAiB,CAAC4C,IAAlB5C,CAAuB,EAAvBA,EAA2B;AAAE6C,YAAI,EAAE;AAAEC,mBAAS,EAAE,CAAC;AAAd;AAAR,OAA3B9C,EAAwD+C,KAAxD/C,EAAN;AAAA,KAAD,CAA3B;AAIF,wBACA,8CACE,oBAAC,MAAD,OADF,eAEI;AAAI,iBAAU;AAAd,mCAFJ,eAGI,oBAAC,WAAD,OAHJ,EAIS0C,QAAQ,CAACM,GAATN,CAAapC,iBAAO;AAAA,0BAAI,oBAAC,OAAD;AAAS,aAAMA,OAAO,CAACiC,GAAvB;AAA4B,iBAASjC,OAArC;AAA6C,uBAAegC;AAA5D,QAAJ;AAAA,KAApBI,CAJT,eAKE,oBAAC,MAAD,OALF,CADA;AANA;;KAAMD,K;YAEaE;;;OAFbF;wBAkBSA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBfQ,QAAM,CAACC,OAAPD,CAAe,YAAM;AACnBE,UAAM,eAAC,oBAAC,GAAD,OAAD,EAASC,QAAQ,CAACC,cAATD,CAAwB,cAAxBA,CAAT,CAAND;AADF","file":"/app.js","sourcesContent":["import {Mongo} from 'meteor/mongo'\n\nexport const PatientCollection = new Mongo.Collection('Patients2')","import React from \"react\";\n\n const Footer = () => {\n    \n    return(\n        <div className=\"Footer\">\n            <h1>Esto es Footer</h1>\n        </div>\n    )\n};\n\nexport default Footer;","import React from \"react\";\n\nconst NavBar = () => {\n    \n    return(\n        <div className=\"NavBar\">\n            <h1>Esto es El NavBar</h1>\n        </div>\n    )\n};\nexport default NavBar;","import React from 'react'\nimport patient from '../../api/Collections/PatientCollection'\n\n\nconst Patient = ({patient, onDeleteClick}) => {\n  return (\n    <div>\n      <tr>\n        <th>Nombre y Apellido</th>\n        <th>Rut</th>\n        <th>zipCode</th>\n        <th>County</th>\n        <th>state</th>\n        </tr>\n        <tr>\n        <td>{patient.name}-{patient.FirstLastName}-{patient.SecondLastName}</td>\n        <td>{patient.Rut}</td>\n        <td>{patient.zipCode}</td>\n        <td>{patient.state}</td>\n        <td>{patient.county}</td>\n        <button onClick={() => onDeleteClick(patient)}value=\"eliminar\">ELIMINAR</button>\n        </tr>\n      </div>  \n      )\n    };\n    \n    export default Patient;\n    \n    \n    \n   ","import React, { useState } from 'react';\nimport { PatientCollection } from '../../api/Collections/PatientCollection';\nimport { useForm } from \"react-hook-form\";\n\nconst PatientForm = () => {\n\n  //SetState and Const for parameters\n  const [name, setName] = useState(\"\");\n  const [FirstLastName, setFirstLastName] = useState(\"\");\n  const [SecondLastName, setSecondLastName] = useState(\"\");\n  const [Rut, setRut] = useState(\"\");\n  const [zipCode, setZipCode] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [county, setCounty] = useState(\"\");\n\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const submit = async (data) => {\n\n    await data.preventDefault;\n\n    if (!Rut) return;\n\n    PatientCollection.insert({\n      name, FirstLastName, SecondLastName, Rut, zipCode, state, county,\n    });\n\n    setName(\"\");\n    setFirstLastName(\"\")\n    setSecondLastName(\"\")\n    setRut(\"\")\n    setZipCode(\"\")\n    setState(\"\")\n    setCounty(\"\")\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit(submit)}>\n        <label htmlFor=\"name\">First name </label>\n        <input\n          autoComplete=\"name\"\n          type=\"text\"\n          placeholder=\"Nombre\"\n          value={name}\n          {...register('name', { required: true })}\n          onChange={(e) => setName(e.target.value)}\n        />\n        {errors.name && <p>Se necesita Un Nombre</p>}\n        <label htmlFor=\"FirstLastName\">Apellido Materno </label>\n        <input\n          type=\"text\"\n          placeholder=\"Apellido Paterno\"\n          value={FirstLastName}\n          {...register('FirstLastName', { required: true })}\n          onChange={(e) => setFirstLastName(e.target.value)}\n        />\n        {errors.FirstLastName && <p>Necesitas Un Apellido Paterno</p>}\n        <label htmlFor=\"SecondLastName\" >Apellido Materno </label>\n        <input\n          type=\"text\"\n          placeholder=\"Apellido Materno\"\n          value={SecondLastName}\n          onChange={(e) => setSecondLastName(e.target.value)}\n        />\n        <label htmlFor=\"Rut\">Rut </label>\n        <input\n          type=\"text\"\n          placeholder=\"Rut\"\n          value={Rut}\n          {...register('Rut', { required: true })}\n          onChange={(e) => setRut(e.target.value)}\n        />\n        {errors.Rut && <p>Se Necesita Un Rut</p>}\n        <label htmlFor=\"zipCode\">Codigo Postal </label>\n        <input\n          type=\"text\"\n          placeholder=\"Codigo Postal\"\n          value={zipCode}\n          {...register('zipCode', { required: true })}\n          onChange={(e) => setZipCode(e.target.value)}\n        />\n        {errors.zipCode && <p>Se Necesita Un Codigo Postal</p>}\n        <label htmlFor=\"state\" >Region </label>\n        <input\n          type=\"text\"\n          placeholder=\"Region\"\n          value={state}\n          {...register('state', { required: true })}\n          onChange={(e) => setState(e.target.value)}\n        />\n        {errors.state && <p>Se Necesita Una Region</p>}\n        <label htmlFor=\"county\" >Comuna</label>\n        <input\n          type=\"text\"\n          placerholder=\"Comuna\"\n          value={county}\n          {...register('county', { required: true })}\n          onChange={(e) => setCounty(e.target.value)}\n        />\n        {errors.county && <p>Se Necesita Una Comuna</p> }\n        <button type=\"submit\" >enviar</button>\n      </form>\n    </div>\n  );\n};\n\nexport default PatientForm;\n\n","import React from \"react\";\nimport { PatientCollection } from \"../api/Collections/PatientCollection\";\nimport Patient from '../ui/components/Patient';\nimport PatientForm from './components/PatientForm';\nimport {useTracker} from 'meteor/react-meteor-data';\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\n\nconst deletePatient = ({_id}) => PatientCollection.remove(_id);\n\nconst App = () => {\n\n  const patients = useTracker(() => PatientCollection.find({}, { sort: { createdAt: -1 } }).fetch());\n\n\n\nreturn (\n<div>\n  <NavBar/>\n    <h1 className=\"text-3xl font-bold underline\">prueba registro Pacientes</h1>\n    <PatientForm/>\n        {patients.map(patient => <Patient key={ patient._id }patient={patient}onDeleteClick={deletePatient}/>)}\n  <Footer/>\n  </div>\n  )\n};\n\n\nexport default App;\n\n\n\n\n\n","import React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport { render } from 'react-dom';\nimport  App  from '/imports/ui/App';\n\nMeteor.startup(() => {\n  render(<App/>, document.getElementById('react-target'));\n});\n"]}